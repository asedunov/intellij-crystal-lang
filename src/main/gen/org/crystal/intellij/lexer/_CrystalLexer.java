/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.crystal.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import it.unimi.dsi.fastutil.ints.IntStack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayDeque;
import java.util.Deque;

import static org.crystal.intellij.lexer.TokenTypesKt.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Crystal.flex</tt>
 */
public class _CrystalLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HEREDOC_START_ID = 2;
  public static final int HEREDOC_HEADER = 4;
  public static final int HEREDOC_BODY = 6;
  public static final int HEREDOC_END_ID = 8;
  public static final int CHAR_LITERAL_BODY = 10;
  public static final int SYMBOL = 12;
  public static final int SYMBOL_BODY = 14;
  public static final int STRING_LITERAL_BODY = 16;
  public static final int COMMAND_LITERAL_BODY = 18;
  public static final int REGEX_LITERAL_BODY = 20;
  public static final int CHAR_UNICODE_BLOCK = 22;
  public static final int STRING_UNICODE_BLOCK = 24;
  public static final int INTERPOLATION_BLOCK = 26;
  public static final int SIMPLE_STRING_BLOCK = 28;
  public static final int STRING_BLOCK = 30;
  public static final int REGEX_BLOCK = 32;
  public static final int STRING_ARRAY_BLOCK = 34;
  public static final int BLOCK_END = 36;
  public static final int PERCENT = 38;
  public static final int LOOKAHEAD = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\17\100\u0100\200");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\100\4");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\46\1\37\1\5\1\60\1\54\1\51\1\36\1\62\1\63"+
    "\1\43\1\42\1\73\1\30\1\31\1\40\1\12\1\11\1\24\1\23\1\25\1\10\1\22\1\10\1\21"+
    "\1\7\1\72\1\74\1\47\1\44\1\50\1\56\1\61\3\6\1\111\1\114\1\117\2\57\1\112\2"+
    "\57\1\116\1\57\1\115\2\57\1\65\1\113\10\57\1\41\1\4\1\55\1\53\1\14\1\70\1"+
    "\33\1\16\1\77\1\104\1\27\1\26\1\102\1\107\1\17\1\57\1\103\1\100\1\71\1\101"+
    "\1\15\1\106\1\64\1\66\1\75\1\76\1\20\1\32\1\67\1\13\1\110\1\105\1\34\1\52"+
    "\1\35\1\45\40\0\141\57\100\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\20\0\1\3\1\4\1\5\1\3"+
    "\1\6\1\7\2\10\1\11\6\7\1\12\1\13\2\7"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\3\1\37\1\40\2\7\1\41"+
    "\1\7\1\42\1\43\1\44\10\7\1\45\1\46\1\45"+
    "\2\47\4\1\2\2\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\54\1\0\1\54\1\0\4\54\3\56\1\57"+
    "\1\60\1\61\1\60\1\62\1\60\1\63\2\60\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\60\1\73"+
    "\1\74\2\60\1\75\1\76\1\60\1\77\1\100\1\27"+
    "\1\101\1\42\2\102\2\7\7\0\2\7\1\103\2\7"+
    "\1\104\1\7\1\105\7\7\1\106\1\107\1\110\2\7"+
    "\1\111\2\7\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\1\140\3\141\1\142\1\143\1\0\4\7\1\144\1\145"+
    "\14\7\1\146\4\7\1\0\1\147\2\150\1\53\3\54"+
    "\4\151\1\152\2\153\1\152\2\151\1\66\1\151\1\154"+
    "\2\0\1\155\1\156\4\0\1\126\1\0\1\10\4\0"+
    "\1\157\1\0\1\157\3\10\4\7\1\160\11\7\1\161"+
    "\1\162\5\7\1\163\1\164\2\7\1\165\1\166\2\7"+
    "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\1\204\1\205\1\206"+
    "\1\207\20\7\1\210\1\211\1\7\1\212\4\7\1\46"+
    "\1\150\1\213\3\151\1\214\1\66\1\215\1\216\1\217"+
    "\1\220\1\221\1\0\1\157\22\7\1\222\1\223\11\7"+
    "\1\224\1\7\1\225\3\7\1\226\2\7\1\227\1\230"+
    "\1\231\1\232\1\7\1\233\1\234\4\7\1\150\1\151"+
    "\1\66\5\7\1\235\1\236\1\237\2\7\1\240\1\7"+
    "\1\241\2\7\1\242\1\7\1\243\3\7\1\244\5\7"+
    "\1\245\2\7\1\246\1\247\3\7\1\250\3\7\1\251"+
    "\1\150\1\66\10\7\1\252\1\253\1\254\1\255\4\7"+
    "\1\256\1\7\1\257\1\260\1\261\1\262\1\263\1\264"+
    "\3\7\1\66\1\265\5\7\1\266\4\7\1\267\3\7"+
    "\1\270\1\7\1\271\1\272\1\273\2\7\1\274\1\275"+
    "\11\7\1\276\1\277\3\7\1\300\5\7\1\301\2\7"+
    "\1\302\1\7\1\303\1\7\1\304";

  private static int [] zzUnpackAction() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730"+
    "\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0"+
    "\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u0c80\0\u0cd0\0\u0d20\0\u0d70"+
    "\0\u0dc0\0\u0690\0\u0e10\0\u0e60\0\u0eb0\0\u0f00\0\u0f50\0\u0fa0"+
    "\0\u0690\0\u0690\0\u0690\0\u0ff0\0\u1040\0\u0690\0\u0690\0\u1090"+
    "\0\u10e0\0\u0690\0\u1130\0\u1180\0\u0690\0\u0690\0\u11d0\0\u1220"+
    "\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u0690\0\u1450"+
    "\0\u14a0\0\u14f0\0\u0690\0\u1540\0\u1590\0\u15e0\0\u0690\0\u1630"+
    "\0\u1680\0\u0690\0\u16d0\0\u0690\0\u1720\0\u0690\0\u0690\0\u1770"+
    "\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u0690\0\u1ae0\0\u1b30\0\u1b80\0\u0690\0\u1bd0"+
    "\0\u0690\0\u1c20\0\u1c70\0\u1cc0\0\u0690\0\u1d10\0\u0690\0\u1d60"+
    "\0\u0690\0\u0690\0\u1db0\0\u0690\0\u0690\0\u1e00\0\u1e50\0\u1ea0"+
    "\0\u1ef0\0\u1f40\0\u0690\0\u1f90\0\u1fe0\0\u0690\0\u2030\0\u2080"+
    "\0\u20d0\0\u0690\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0"+
    "\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u0820"+
    "\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760"+
    "\0\u27b0\0\u0690\0\u0690\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940"+
    "\0\u2990\0\u29e0\0\u0690\0\u2a30\0\u0690\0\u2a80\0\u0690\0\u2ad0"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u2b20\0\u2b70\0\u0690\0\u2bc0"+
    "\0\u2c10\0\u2c60\0\u2cb0\0\u0690\0\u2d00\0\u0690\0\u2d50\0\u0690"+
    "\0\u2da0\0\u2df0\0\u0690\0\u2e40\0\u0690\0\u2e90\0\u2ee0\0\u2f30"+
    "\0\u2f80\0\u2fd0\0\u0690\0\u0690\0\u3020\0\u3070\0\u30c0\0\u3110"+
    "\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390"+
    "\0\u0820\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520\0\u0690\0\u0690"+
    "\0\u3570\0\u0690\0\u35c0\0\u3610\0\u3660\0\u0690\0\u36b0\0\u3700"+
    "\0\u3750\0\u19f0\0\u37a0\0\u37f0\0\u0690\0\u3840\0\u3890\0\u38e0"+
    "\0\u3930\0\u0690\0\u3980\0\u39d0\0\u0690\0\u0690\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u0690\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20"+
    "\0\u3f70\0\u3fc0\0\u4010\0\u0820\0\u4060\0\u40b0\0\u4100\0\u4150"+
    "\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330\0\u0820\0\u4380"+
    "\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u0820\0\u0690\0\u4510\0\u4560"+
    "\0\u2120\0\u0820\0\u45b0\0\u4600\0\u0690\0\u0690\0\u0690\0\u0690"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u4650\0\u46a0\0\u46f0\0\u4740"+
    "\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0"+
    "\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u0820\0\u4ba0\0\u4bf0"+
    "\0\u0820\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u0690\0\u4d80\0\u0690"+
    "\0\u4dd0\0\u4e20\0\u4e70\0\u0690\0\u4ec0\0\u0690\0\u0690\0\u0690"+
    "\0\u0690\0\u0690\0\u4f10\0\u0690\0\u4f60\0\u4fb0\0\u5000\0\u5050"+
    "\0\u50a0\0\u50f0\0\u5140\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0"+
    "\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u0820\0\u0820"+
    "\0\u5500\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730"+
    "\0\u5780\0\u0820\0\u57d0\0\u0820\0\u5820\0\u5870\0\u58c0\0\u5910"+
    "\0\u5960\0\u59b0\0\u0820\0\u0820\0\u5a00\0\u0820\0\u5a50\0\u2120"+
    "\0\u0820\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0\0\u5c30\0\u5c80"+
    "\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u0820\0\u0820\0\u2120"+
    "\0\u5e60\0\u5eb0\0\u0820\0\u5f00\0\u0820\0\u5f50\0\u5fa0\0\u0820"+
    "\0\u5ff0\0\u0820\0\u6040\0\u6090\0\u60e0\0\u0820\0\u6130\0\u6180"+
    "\0\u61d0\0\u6220\0\u6270\0\u0820\0\u62c0\0\u6310\0\u0820\0\u2120"+
    "\0\u6360\0\u63b0\0\u6400\0\u0820\0\u6450\0\u64a0\0\u64f0\0\u0820"+
    "\0\u6540\0\u6590\0\u65e0\0\u6630\0\u6680\0\u66d0\0\u6720\0\u6770"+
    "\0\u67c0\0\u6810\0\u0820\0\u0820\0\u0820\0\u0820\0\u6860\0\u68b0"+
    "\0\u6900\0\u6950\0\u0820\0\u69a0\0\u0820\0\u0820\0\u0820\0\u0820"+
    "\0\u0820\0\u0820\0\u69f0\0\u6a40\0\u6a90\0\u0690\0\u0820\0\u6ae0"+
    "\0\u6b30\0\u6b80\0\u6bd0\0\u6c20\0\u0820\0\u6c70\0\u6cc0\0\u6d10"+
    "\0\u6d60\0\u0820\0\u6db0\0\u6e00\0\u6e50\0\u0820\0\u6ea0\0\u0820"+
    "\0\u0820\0\u0820\0\u6ef0\0\u6f40\0\u0820\0\u0820\0\u6f90\0\u6fe0"+
    "\0\u7030\0\u7080\0\u70d0\0\u7120\0\u7170\0\u71c0\0\u7210\0\u0820"+
    "\0\u0820\0\u7260\0\u72b0\0\u7300\0\u0820\0\u7350\0\u73a0\0\u73f0"+
    "\0\u7440\0\u7490\0\u0820\0\u74e0\0\u7530\0\u2120\0\u7580\0\u0820"+
    "\0\u75d0\0\u0820";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\2\30\1\31\1\32\1\33\3\34\1\35"+
    "\1\33\1\36\1\37\1\40\1\41\1\42\5\34\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\33\1\74\1\75\1\76\1\77\2\33\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\2\33\1\114\1\33\1\115\1\33\1\116"+
    "\7\33\6\117\22\120\2\117\2\120\2\117\1\121\20\117"+
    "\1\120\4\117\4\120\1\117\1\120\3\117\23\120\1\26"+
    "\1\27\1\122\1\123\2\26\1\33\3\34\1\35\1\33"+
    "\1\36\1\37\1\40\1\41\1\42\5\34\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\33"+
    "\1\74\1\75\1\76\1\77\2\33\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\2\33\1\114\1\33\1\115\1\33\1\116\7\33"+
    "\2\124\1\125\2\124\1\126\26\124\1\127\63\124\2\130"+
    "\1\131\115\130\4\132\1\133\31\132\1\134\61\132\6\0"+
    "\1\135\4\0\6\135\5\0\2\135\1\136\1\0\2\135"+
    "\3\0\1\137\1\140\1\141\1\136\1\142\1\143\1\136"+
    "\1\144\1\145\1\146\1\147\3\136\2\0\1\135\4\0"+
    "\4\135\1\0\1\135\3\0\23\135\4\150\1\151\1\152"+
    "\31\150\1\153\60\150\4\154\1\155\1\156\31\154\1\157"+
    "\60\154\4\160\1\155\1\156\62\160\1\161\27\160\4\162"+
    "\1\163\1\156\32\162\1\164\57\162\6\165\5\166\3\165"+
    "\1\166\2\165\7\166\3\165\1\166\1\165\1\167\41\165"+
    "\1\166\4\165\1\166\4\165\1\166\2\165\1\166\2\165"+
    "\1\166\1\165\1\27\4\165\5\166\3\165\1\166\2\165"+
    "\7\166\3\165\1\166\1\165\1\167\41\165\1\166\4\165"+
    "\1\166\4\165\1\166\2\165\1\166\2\165\1\166\1\26"+
    "\1\27\2\170\2\26\1\33\3\34\1\35\1\33\1\36"+
    "\1\37\1\40\1\41\1\42\5\34\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\171\1\172\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\33\1\74"+
    "\1\75\1\76\1\77\2\33\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\2\33\1\114\1\33\1\115\1\33\1\116\7\33\34\173"+
    "\1\174\1\175\3\173\1\174\5\173\1\174\1\175\1\173"+
    "\1\175\2\173\1\175\4\173\1\174\1\175\34\173\4\176"+
    "\1\155\1\156\26\176\1\174\1\175\3\176\1\174\5\176"+
    "\1\174\1\175\1\176\1\175\2\176\1\175\4\176\1\174"+
    "\1\175\40\176\1\163\1\156\26\176\1\174\1\175\3\176"+
    "\1\174\5\176\1\174\1\175\1\176\1\175\2\176\1\175"+
    "\4\176\1\174\1\175\34\176\1\177\1\200\2\201\1\202"+
    "\27\177\1\174\1\175\3\177\1\174\5\177\1\174\1\175"+
    "\1\177\1\175\2\177\1\175\4\177\1\174\1\175\34\177"+
    "\35\0\1\203\12\0\1\203\1\0\1\203\2\0\1\203"+
    "\5\0\1\203\110\0\1\204\43\0\1\26\1\27\2\30"+
    "\1\31\1\32\1\33\3\34\1\35\1\33\1\36\1\37"+
    "\1\40\1\41\1\42\5\34\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\3\26\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\205\1\65\1\66\1\67\1\70"+
    "\1\206\1\72\1\73\1\33\1\74\1\75\1\76\1\77"+
    "\2\33\1\100\1\101\1\26\1\103\1\207\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\2\33\1\114\1\33"+
    "\1\115\1\33\1\116\7\33\121\0\1\27\120\0\2\30"+
    "\116\0\1\210\1\211\114\0\2\32\2\0\114\32\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\7\0\4\34\1\0\1\34\2\0\2\214\5\34\1\215"+
    "\1\216\1\0\1\217\75\0\4\34\1\220\1\34\1\221"+
    "\1\222\2\214\5\34\1\215\1\216\1\0\1\217\74\0"+
    "\6\33\1\223\13\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\12\33\1\224\5\33\1\225\1\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\21\33\1\226\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\2\33\1\227\1\33\1\0"+
    "\1\33\3\0\23\33\6\0\20\33\1\230\1\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\231\3\33\1\232"+
    "\16\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\4\33\1\233\16\33\6\0\7\33\1\234\2\33"+
    "\1\235\7\33\2\0\1\33\1\236\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\5\33\1\237\14\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\3\33\1\240\1\241\16\33"+
    "\44\0\1\242\3\0\1\243\100\0\1\244\74\0\21\33"+
    "\1\245\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\10\33\1\246\11\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\1\247\2\33\1\250\1\251\16\33\40\0"+
    "\1\252\3\0\1\253\130\0\1\254\106\0\1\255\116\0"+
    "\1\256\1\257\117\0\1\260\1\261\2\0\1\262\113\0"+
    "\1\263\1\264\116\0\1\265\2\0\1\266\114\0\1\267"+
    "\3\0\1\270\77\0\1\271\11\0\1\272\1\273\1\274"+
    "\4\0\1\275\112\0\1\276\5\0\1\277\111\0\1\300"+
    "\61\0\1\301\4\302\6\301\5\302\2\301\2\0\2\301"+
    "\11\0\1\303\10\0\1\303\1\301\4\0\4\301\1\0"+
    "\1\301\3\0\23\301\6\0\1\304\4\0\6\304\5\0"+
    "\2\304\2\0\2\304\5\0\1\305\15\0\1\304\1\0"+
    "\1\306\2\0\4\304\1\0\1\304\3\0\23\304\6\0"+
    "\21\33\1\307\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\11\33\1\310\10\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\12\33\1\311\10\33\6\0\7\33"+
    "\1\312\12\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\1\313\4\0\6\313\5\0\3\313\1\0"+
    "\2\313\3\0\16\313\2\0\1\313\4\0\4\313\1\0"+
    "\1\313\1\314\2\0\23\313\6\0\11\33\1\315\1\316"+
    "\6\33\1\317\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\33\1\320\21\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\2\33"+
    "\1\321\1\33\1\0\1\33\3\0\12\33\1\322\1\323"+
    "\7\33\6\0\22\33\2\0\1\33\1\324\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\325\17\33\6\0\11\33\1\326"+
    "\10\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\11\33\1\327\7\33\1\330\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\7\33\1\331\11\33"+
    "\1\332\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\7\33\1\333\12\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\2\33\1\334"+
    "\1\33\1\0\1\33\3\0\23\33\6\0\11\33\1\335"+
    "\10\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\120\2\0\2\120\23\0\1\120\4\0\4\120"+
    "\1\0\1\120\3\0\23\120\6\0\22\336\2\0\2\336"+
    "\23\0\1\336\4\0\4\336\1\0\1\336\3\0\23\336"+
    "\3\0\1\123\114\0\2\124\2\0\1\124\1\0\26\124"+
    "\1\0\65\124\1\0\2\124\1\0\26\124\1\0\63\124"+
    "\34\0\1\337\63\0\2\130\2\0\116\130\1\0\115\130"+
    "\4\0\1\340\5\0\1\340\3\0\1\340\1\0\1\341"+
    "\5\0\2\340\2\0\2\340\2\0\1\340\27\0\1\340"+
    "\7\0\1\340\2\0\1\340\24\0\22\135\2\0\2\135"+
    "\10\0\1\342\1\0\1\342\7\0\1\342\1\135\4\0"+
    "\4\135\1\0\1\135\3\0\23\135\40\0\1\136\134\0"+
    "\1\343\105\0\1\136\120\0\1\344\1\136\116\0\2\136"+
    "\116\0\1\345\2\0\1\136\114\0\1\136\3\0\1\136"+
    "\77\0\1\136\11\0\1\136\1\142\54\0\4\150\1\0"+
    "\32\150\1\0\60\150\10\346\3\347\1\350\4\346\1\351"+
    "\1\346\4\347\72\346\4\150\1\0\27\150\1\352\2\150"+
    "\1\0\60\150\4\154\2\0\31\154\1\0\60\154\2\346"+
    "\1\353\1\354\4\346\3\347\1\350\4\346\1\351\1\346"+
    "\4\347\72\346\34\0\1\355\63\0\4\160\2\0\62\160"+
    "\1\0\27\160\4\162\2\0\32\162\1\0\57\162\2\0"+
    "\1\356\1\357\34\0\1\346\72\0\1\164\3\0\1\164"+
    "\51\0\1\164\34\0\5\360\3\0\1\360\2\0\7\360"+
    "\3\0\1\360\43\0\1\360\4\0\1\360\4\0\1\360"+
    "\2\0\1\360\2\0\1\360\2\0\2\170\114\0\34\173"+
    "\2\0\3\173\1\0\5\173\2\0\1\173\1\0\2\173"+
    "\1\0\4\173\2\0\34\173\4\176\2\0\26\176\2\0"+
    "\3\176\1\0\5\176\2\0\1\176\1\0\2\176\1\0"+
    "\4\176\2\0\34\176\1\177\4\0\27\177\2\0\3\177"+
    "\1\0\5\177\2\0\1\177\1\0\2\177\1\0\4\177"+
    "\2\0\34\177\1\0\1\200\120\0\2\201\115\0\1\346"+
    "\1\361\1\346\30\0\2\362\3\0\1\362\5\0\2\362"+
    "\1\0\1\362\2\0\1\362\4\0\2\362\47\0\1\363"+
    "\3\0\1\364\14\0\1\365\4\0\1\365\2\0\1\366"+
    "\2\0\1\365\2\0\1\365\7\0\1\365\1\0\1\367"+
    "\1\370\1\371\1\372\74\0\1\265\2\0\1\373\142\0"+
    "\1\314\26\0\1\211\1\0\1\211\115\0\1\211\162\0"+
    "\1\212\64\0\1\374\7\0\1\375\1\376\1\377\116\0"+
    "\1\u0100\1\u0101\103\0\4\u0102\6\0\5\u0102\2\0\1\u0103"+
    "\11\0\1\u0103\64\0\4\u0104\6\0\5\u0104\100\0\5\u0105"+
    "\1\0\1\u0105\1\0\1\u0105\2\0\7\u0105\3\0\1\u0105"+
    "\43\0\1\u0105\4\0\1\u0105\4\0\1\u0105\2\0\1\u0105"+
    "\2\0\1\u0105\10\0\3\u0106\1\0\1\u0106\5\0\4\u0106"+
    "\103\0\2\u0107\1\0\1\u0107\111\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\14\33\1\u0108\2\33\1\u0109"+
    "\1\33\1\u010a\1\u010b\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\1\33\1\u010c\21\33\6\0\20\33"+
    "\1\u010d\1\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\5\33\1\u010e\15\33\6\0\21\33\1\u010f\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\6\33"+
    "\1\u0110\13\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\1\u0111\1\33\1\u0112\20\33\6\0\11\33\1\u0113"+
    "\10\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\1\33"+
    "\1\u0114\1\33\1\u0115\17\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\2\33\1\u0116\1\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\4\33"+
    "\1\u0117\16\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\u0118\17\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\33\1\u0119\21\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\u011a\22\33\6\0\12\33\1\u011b\7\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\1\u011c\6\33\1\u011d\13\33"+
    "\31\0\1\u011e\74\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\2\33\1\u011f"+
    "\1\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\u0120\22\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\u0121\1\33\4\0\4\33\1\0\1\u0122\3\0\23\33"+
    "\6\0\11\33\1\u0123\10\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\4\33\1\u0124\16\33\44\0\1\u0125"+
    "\117\0\1\u0126\11\0\1\u0127\105\0\1\u0128\117\0\1\u0129"+
    "\123\0\1\u012a\77\0\1\u012b\13\0\1\u012c\117\0\1\u012d"+
    "\117\0\1\u012e\3\0\1\u012f\113\0\1\u0130\116\0\1\u0131"+
    "\1\u0132\117\0\1\u0133\117\0\1\u0134\61\0\22\301\2\0"+
    "\2\301\23\0\1\301\4\0\4\301\1\0\1\301\3\0"+
    "\23\301\6\0\1\301\4\302\6\301\5\302\2\301\2\0"+
    "\2\301\22\0\1\303\1\301\4\0\4\301\1\0\1\301"+
    "\3\0\23\301\6\0\22\304\2\0\2\304\23\0\1\304"+
    "\4\0\4\304\1\0\1\304\3\0\23\304\6\0\1\u0135"+
    "\4\0\6\u0135\5\0\2\u0135\2\0\2\u0135\23\0\1\u0135"+
    "\4\0\4\u0135\1\0\1\u0135\3\0\23\u0135\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\1\u0136\3\33\1\0\1\33\3\0\1\u0137"+
    "\1\u0138\21\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\1\33\1\u0139\21\33\6\0\11\33\1\u013a"+
    "\7\33\1\u013b\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\7\33\1\u013c\13\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\10\33\1\u013d\12\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\11\33"+
    "\1\u013e\11\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\u013f\17\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\2\33\1\u0140\1\33\1\0\1\33\3\0\23\33"+
    "\6\0\12\33\1\u0141\7\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\21\33\1\u0142\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\11\33\1\u0143\11\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\u0144\22\33\6\0\22\33\2\0\1\33\1\u0145\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\10\33\1\u0146\11\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\3\33"+
    "\1\u0147\17\33\6\0\5\33\1\u0148\14\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\20\33\1\u0149"+
    "\1\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\11\33\1\u014a\10\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\7\33\1\u014b\1\33\1\u014c"+
    "\10\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\21\33\1\u014d\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\2\336\2\0\32\336\1\u014e\61\336\6\0"+
    "\5\u014f\3\0\1\u014f\2\0\7\u014f\3\0\1\u014f\1\u0150"+
    "\42\0\1\u014f\4\0\1\u014f\4\0\1\u014f\2\0\1\u014f"+
    "\2\0\1\u014f\44\0\1\136\11\0\1\136\105\0\1\136"+
    "\123\0\1\136\57\0\3\u0151\7\0\4\u0151\100\0\5\u0152"+
    "\3\0\1\u0152\2\0\7\u0152\3\0\1\u0152\43\0\1\u0152"+
    "\4\0\1\u0152\4\0\1\u0152\2\0\1\u0152\2\0\1\u0152"+
    "\6\0\5\u0153\3\0\1\u0153\2\0\7\u0153\3\0\1\u0153"+
    "\1\u0154\42\0\1\u0153\4\0\1\u0153\4\0\1\u0153\2\0"+
    "\1\u0153\2\0\1\u0153\1\0\1\354\1\0\1\354\115\0"+
    "\1\354\117\0\1\357\1\0\1\357\115\0\1\357\124\0"+
    "\5\u0155\3\0\1\u0155\2\0\7\u0155\3\0\1\u0155\43\0"+
    "\1\u0155\4\0\1\u0155\4\0\1\u0155\2\0\1\u0155\2\0"+
    "\1\u0155\3\0\1\346\150\0\1\u0156\4\0\1\u0156\5\0"+
    "\1\u0156\2\0\1\u0156\7\0\1\u0156\71\0\1\u0157\4\0"+
    "\1\u0157\5\0\1\u0157\2\0\1\u0157\7\0\1\u0157\71\0"+
    "\1\u0158\4\0\1\u0158\5\0\1\u0158\2\0\1\u0158\7\0"+
    "\1\u0158\71\0\1\365\4\0\1\365\5\0\1\365\2\0"+
    "\1\365\7\0\1\365\71\0\1\u0159\4\0\1\u0159\5\0"+
    "\1\u0159\2\0\1\u0159\7\0\1\u0159\71\0\1\u015a\4\0"+
    "\1\u015a\5\0\1\u015a\2\0\1\u015a\7\0\1\u015a\101\0"+
    "\1\u012c\75\0\1\375\1\0\1\u015b\120\0\1\375\116\0"+
    "\1\375\120\0\1\u015c\116\0\1\u015c\102\0\4\u0102\1\0"+
    "\1\u0102\4\0\5\u0102\1\215\100\0\4\u0102\6\0\5\u0102"+
    "\101\0\4\u0104\1\0\1\u0104\4\0\5\u0104\1\215\1\216"+
    "\76\0\5\u0105\1\0\1\u0105\1\0\1\u0105\2\214\7\u0105"+
    "\3\0\1\u0105\43\0\1\u0105\4\0\1\u0105\4\0\1\u0105"+
    "\2\0\1\u0105\2\0\1\u0105\10\0\3\u0106\1\0\1\u0106"+
    "\2\0\2\214\1\0\4\u0106\103\0\2\u0107\1\0\1\u0107"+
    "\2\0\2\214\105\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\15\33\1\u015d\5\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\20\33\1\u015e\2\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\15\33\1\u015f\5\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\15\33\1\u0160\5\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\1\u0161\22\33"+
    "\6\0\11\33\1\u0162\10\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\1\33\1\u0163"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\1\33\1\u0164\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\1\33"+
    "\1\u0165\21\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\u0166\17\33\6\0\7\33\1\u0167"+
    "\12\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\4\33"+
    "\1\u0168\16\33\6\0\11\33\1\u0169\10\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\21\33\1\u016a"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\1\33\1\u016b\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\1\u016c\22\33\6\0\21\33\1\u016d\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\11\33\1\u016e"+
    "\7\33\1\u016f\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\u0170"+
    "\3\0\23\33\6\0\12\33\1\u0171\7\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\10\33\1\u0172"+
    "\11\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\33\1\u0173\21\33\6\0\22\33\2\0\1\33\1\u0174"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\7\33\1\u0175"+
    "\12\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\u0135\2\0\2\u0135\23\0\1\u0135\4\0\4\u0135"+
    "\1\0\1\u0135\3\0\23\u0135\6\0\12\33\1\u0176\7\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\2\33"+
    "\1\u0177\6\33\1\u0178\11\33\6\0\12\33\1\u0179\7\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\12\33"+
    "\1\u017a\10\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\u017b\17\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\4\33\1\u017c\16\33"+
    "\6\0\12\33\1\u017d\7\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\21\33\1\u017e\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\21\33\1\u017f"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\20\33\1\u0180\1\u0181\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\12\33\1\u0182\7\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\21\33\1\u0183"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\4\33"+
    "\1\u0184\16\33\6\0\21\33\1\u0185\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\21\33\1\u0186\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\1\u0187\22\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\u0188\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\1\33\1\u0189\21\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\4\33\1\u018a\16\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\1\33"+
    "\1\u018b\21\33\6\0\22\33\2\0\1\u018c\1\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\3\33\1\u018d\17\33\6\0"+
    "\5\u018e\3\0\1\u018e\2\0\7\u018e\3\0\1\u018e\43\0"+
    "\1\u018e\4\0\1\u018e\4\0\1\u018e\2\0\1\u018e\2\0"+
    "\1\u018e\10\0\3\u018f\7\0\4\u018f\100\0\5\346\3\0"+
    "\1\346\2\0\7\346\3\0\1\346\43\0\1\346\4\0"+
    "\1\346\4\0\1\346\2\0\1\346\2\0\1\346\6\0"+
    "\5\350\3\0\1\350\2\0\7\350\3\0\1\350\43\0"+
    "\1\350\4\0\1\350\4\0\1\350\2\0\1\350\2\0"+
    "\1\350\6\0\5\u0190\3\0\1\u0190\2\0\7\u0190\3\0"+
    "\1\u0190\43\0\1\u0190\4\0\1\u0190\4\0\1\u0190\2\0"+
    "\1\u0190\2\0\1\u0190\21\0\1\375\104\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\16\33\1\u0191\4\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\14\33\1\u0192\6\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\20\33\1\u0193\2\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\21\33\1\u0194"+
    "\1\33\6\0\21\33\1\u0195\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\4\33\1\u0196\16\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\6\33\1\u0197"+
    "\14\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\u0198\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\1\33\1\u0199\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\12\33\1\u019a\7\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\4\33"+
    "\1\u019b\16\33\6\0\11\33\1\u019c\10\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\3\33\1\u019d\17\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\u019e\22\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\3\33\1\u019f\17\33\6\0\21\33\1\u01a0"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\4\33"+
    "\1\u01a1\16\33\6\0\20\33\1\u01a2\1\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\2\33\1\u01a3\1\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\1\33\1\u01a4\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\2\33\1\u01a5"+
    "\1\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\u01a6\22\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\1\33"+
    "\1\u01a7\21\33\6\0\11\33\1\u01a8\10\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\12\33\1\u01a9"+
    "\7\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\7\33\1\u01aa\12\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\2\33"+
    "\1\u01ab\1\33\1\0\1\33\3\0\23\33\6\0\21\33"+
    "\1\u01ac\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\3\33\1\u01ad\17\33\6\0\7\33\1\u01ae\12\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\2\33\1\u01af\1\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\u01b0\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\2\33\1\u01b1\20\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\2\33\1\u01b2\20\33"+
    "\6\0\7\33\1\u01b3\12\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\1\u01b4\22\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\33\1\u01b5\21\33"+
    "\6\0\21\33\1\u01b6\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\1\33\1\u01b7\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\7\33\1\u01b8\13\33\6\0"+
    "\5\u01b9\3\0\1\u01b9\2\0\7\u01b9\3\0\1\u01b9\43\0"+
    "\1\u01b9\4\0\1\u01b9\4\0\1\u01b9\2\0\1\u01b9\2\0"+
    "\1\u01b9\10\0\3\346\7\0\4\346\100\0\5\u01ba\3\0"+
    "\1\u01ba\2\0\7\u01ba\3\0\1\u01ba\43\0\1\u01ba\4\0"+
    "\1\u01ba\4\0\1\u01ba\2\0\1\u01ba\2\0\1\u01ba\6\0"+
    "\6\33\1\u01bb\13\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\6\33\1\u01bc\13\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\17\33\1\u01bd\3\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\17\33\1\u01be\3\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\1\33\1\u01bf\21\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\4\33\1\u01c0"+
    "\16\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\7\33\1\u01c1\13\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\1\33\1\u01c2\21\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\1\u01c3"+
    "\22\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\3\33\1\u01c4\17\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\7\33\1\u01c5\13\33\6\0"+
    "\21\33\1\u01c6\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\1\33\1\u01c7\21\33\6\0\22\33\2\0\1\33"+
    "\1\u01c8\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\22\33"+
    "\2\0\1\33\1\u01c9\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\2\33\1\u01ca\1\33\1\0"+
    "\1\33\3\0\23\33\6\0\21\33\1\u01cb\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\4\33\1\u01cc\16\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\4\33\1\u01cd\16\33\6\0\21\33\1\u01ce\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\20\33\1\u01cf"+
    "\1\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\33\1\u01d0\21\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\1\33\1\u01d1\21\33\6\0\20\33"+
    "\1\u01d2\1\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\21\33\1\u01d3\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\2\33\1\u01d4\20\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\1\33\1\u01d5"+
    "\21\33\6\0\5\340\3\0\1\340\2\0\7\340\3\0"+
    "\1\340\43\0\1\340\4\0\1\340\4\0\1\340\2\0"+
    "\1\340\2\0\1\340\6\0\5\u01d6\3\0\1\u01d6\2\0"+
    "\7\u01d6\3\0\1\u01d6\43\0\1\u01d6\4\0\1\u01d6\4\0"+
    "\1\u01d6\2\0\1\u01d6\2\0\1\u01d6\6\0\6\33\1\u01d7"+
    "\13\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\21\33\1\u01d8\1\33\6\0\6\33\1\u01d9\13\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\6\33"+
    "\1\u01da\13\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\7\33\1\u01db\12\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\22\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\2\33\1\u01dc\20\33\6\0"+
    "\21\33\1\u01dd\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\11\33\1\u01de\10\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\11\33\1\u01df\10\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\2\33"+
    "\1\u01e0\20\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\1\33\1\u01e1\21\33\6\0\21\33\1\u01e2"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\7\33"+
    "\1\u01e3\13\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\2\33\1\u01e4"+
    "\1\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\1\33\1\u01e5\21\33"+
    "\6\0\21\33\1\u01e6\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\15\33\1\u01e7\5\33\6\0\6\33\1\u01e8"+
    "\13\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\6\33\1\u01e9\13\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33\6\0\20\33\1\u01ea\1\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\21\33"+
    "\1\u01eb\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\1\33\1\u01ec\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\u01ed\3\0\23\33\6\0\22\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\1\33\1\u01ee\21\33\6\0\11\33"+
    "\1\u01ef\10\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\1\u01f0\22\33\6\0\7\33\1\u01f1\12\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\21\33"+
    "\1\u01f2\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\20\33\1\u01f3\2\33\6\0\6\33\1\u01f4\13\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\22\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\3\33\1\u01f5"+
    "\17\33\6\0\7\33\1\u01f6\12\33\2\0\2\33\10\0"+
    "\1\212\1\0\1\213\7\0\1\213\1\33\4\0\4\33"+
    "\1\0\1\33\3\0\23\33\6\0\6\33\1\u01f7\13\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\20\33\1\u01f8\1\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\7\33\1\u01f9\13\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\17\33\1\u01fa\3\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\u01fb\22\33\6\0\11\33\1\u01fc\10\33\2\0\2\33"+
    "\10\0\1\212\1\0\1\213\7\0\1\213\1\33\4\0"+
    "\4\33\1\0\1\33\3\0\23\33\6\0\22\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\4\33\1\u01fd\16\33"+
    "\6\0\22\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\1\33\1\u01fe\21\33\6\0\6\33\1\u01ff\13\33\2\0"+
    "\2\33\10\0\1\212\1\0\1\213\7\0\1\213\1\33"+
    "\4\0\4\33\1\0\1\33\3\0\23\33\6\0\11\33"+
    "\1\u0200\10\33\2\0\2\33\10\0\1\212\1\0\1\213"+
    "\7\0\1\213\1\33\4\0\4\33\1\0\1\33\3\0"+
    "\23\33\6\0\22\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\10\33\1\u0201\12\33\6\0\7\33\1\u0202\12\33"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\6\33\1\u0203\13\33\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\10\33\1\u0204\12\33\6\0\21\33\1\u0205"+
    "\2\0\2\33\10\0\1\212\1\0\1\213\7\0\1\213"+
    "\1\33\4\0\4\33\1\0\1\33\3\0\23\33\6\0"+
    "\22\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\u0206\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\21\33\1\u0207\2\0\2\33\10\0\1\212\1\0"+
    "\1\213\7\0\1\213\1\33\4\0\4\33\1\0\1\33"+
    "\3\0\23\33\6\0\22\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\7\33\1\u0208\13\33\6\0\7\33\1\u0209"+
    "\12\33\2\0\2\33\10\0\1\212\1\0\1\213\7\0"+
    "\1\213\1\33\4\0\4\33\1\0\1\33\3\0\23\33"+
    "\6\0\20\33\1\u020a\1\33\2\0\2\33\10\0\1\212"+
    "\1\0\1\213\7\0\1\213\1\33\4\0\4\33\1\0"+
    "\1\33\3\0\23\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\20\0\1\11\22\1\4\11\5\1\1\11"+
    "\6\1\3\11\2\1\2\11\2\1\1\11\2\1\2\11"+
    "\10\1\1\11\3\1\1\11\3\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\0\1\1\1\0"+
    "\7\1\1\11\3\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\2\11\5\1\1\11"+
    "\2\1\1\11\3\1\1\11\1\1\7\0\17\1\2\11"+
    "\7\1\1\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\2\1\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\0\4\1\2\11\21\1"+
    "\1\0\2\11\1\1\1\11\3\1\1\11\6\1\1\11"+
    "\4\1\1\11\2\0\2\11\4\0\1\1\1\0\1\11"+
    "\4\0\1\1\1\0\32\1\1\11\6\1\20\11\31\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\5\11\1\0"+
    "\1\11\171\1\1\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static enum BlockKind {
      PAREN, BRACKET, BRACE, ANGLE, PIPE
  }

  private static class Block {
    @NotNull
    private final BlockKind kind;
    private int balance = 1;
    @NotNull
    private final IElementType endType;

    private Block(@NotNull BlockKind kind, @NotNull IElementType endType) {
      this.kind = kind;
      this.endType = endType;
    }
  }

  private final LexerState lexerState = new LexerState();

  private final IntStack states = new IntArrayList();
  private final Deque<Block> blocks = new ArrayDeque<>();

  private final Deque<String> heredocIds = new ArrayDeque<>();
  private int blockLength;

  private int zzStartReadOld = -1;
  private int zzMarkedPosOld = -1;
  private int zzLexicalStateOld = YYINITIAL;

  public _CrystalLexer() {
    this((java.io.Reader)null);
  }

  public LexerState getLexerState() {
    return lexerState;
  }

  public void enterLookAhead() {
    if (zzStartReadOld != -1) throw new AssertionError("Already in look-ahead mode");
    zzStartReadOld = zzStartRead;
    zzMarkedPosOld = zzMarkedPos;
    zzLexicalStateOld = zzLexicalState;
    yybegin(LOOKAHEAD);
  }

  public void leaveLookAhead() {
    yybegin(zzLexicalStateOld);
    boolean nonEmpty = zzMarkedPos != zzMarkedPosOld;
    zzMarkedPos = zzMarkedPosOld;
    zzStartRead = zzStartReadOld;
    zzStartReadOld = -1;
    if (nonEmpty) zzAtEOF = false;
  }

  @Nullable
  public IElementType lookAhead() throws java.io.IOException {
    enterLookAhead();
    IElementType tokenType = advance();
    leaveLookAhead();
    return tokenType;
  }

  private boolean eof() {
      return zzMarkedPos == zzBuffer.length();
  }

  @NotNull
  private IElementType handle(@NotNull IElementType type) {
    if (yystate() != LOOKAHEAD) {
      boolean resetRegexFlags =
        type != CR_WHITESPACE &&
        type != CR_NEWLINE &&
        type != CR_LINE_CONTINUATION &&
        type != CR_SEMICOLON;
      if (resetRegexFlags) {
        lexerState.wantsRegex = true;
        lexerState.slashIsRegex = false;
      }
    }

    return type;
  }

  private void yypushbegin(int state) {
    states.push(yystate());
    yybegin(state);
  }

  private void yypop() {
    int newState = states.isEmpty() ? YYINITIAL : states.popInt();
    if (newState == PERCENT) newState = YYINITIAL;
    yybegin(newState);
  }

  @NotNull
  private IElementType pushAndHandle(int nextState, @NotNull IElementType currentType) {
    yypushbegin(nextState);
    return handle(currentType);
  }

  @NotNull
  private IElementType beginAndHandle(int nextState, @NotNull IElementType currentType) {
    yybegin(nextState);
    return handle(currentType);
  }

  @NotNull
  private IElementType startRegex() {
    return pushAndHandle(REGEX_LITERAL_BODY, CR_REGEX_START);
  }

  @Nullable
  private BlockKind blockKindByStartChar(char ch) {
    switch (ch) {
      case '(': return BlockKind.PAREN;
      case '[': return BlockKind.BRACKET;
      case '{': return BlockKind.BRACE;
      case '<': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @Nullable
  private BlockKind blockKindByEndChar(char ch) {
    switch (ch) {
      case ')': return BlockKind.PAREN;
      case ']': return BlockKind.BRACKET;
      case '}': return BlockKind.BRACE;
      case '>': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @Nullable
  private BlockKind blockKindByStartEndChar(char ch) {
    switch (ch) {
      case '(':
      case ')': return BlockKind.PAREN;
      case '[':
      case ']': return BlockKind.BRACKET;
      case '{':
      case '}': return BlockKind.BRACE;
      case '<':
      case '>': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @NotNull
  private IElementType enterBlock(int blockState, @NotNull IElementType startType, @NotNull IElementType endType) {
    char ch = yycharat(yylength() - 1);
    BlockKind kind = blockKindByStartChar(ch);
    if (kind != null) {
      blocks.push(new Block(kind, endType));
      yypushbegin(blockState);
    }
    blockLength = 0;
    return handle(startType);
  }

  @NotNull
  private IElementType exitBlock() {
    yypop();
    Block block = blocks.pop();
    return handle(block.endType);
  }

  private void incBlock() {
    char ch = yycharat(yylength() - 1);
    BlockKind kind = blockKindByStartChar(ch);
    Block block = blocks.peek();
    if (block != null && block.kind == kind) block.balance++;
  }

  private void decBlock() {
    char ch = yycharat(yylength() - 1);
    BlockKind kind = blockKindByEndChar(ch);
    Block block = blocks.peek();
    if (block != null && block.kind == kind) block.balance--;
  }

  private boolean isInBlockOf(@NotNull BlockKind kind) {
    Block block = blocks.peek();
    return block != null && block.kind == kind;
  }

  private boolean isBlockFinished() {
    Block block = blocks.peek();
    return block != null && block.balance == 0;
  }

  private void extendBlock() {
    blockLength += yylength();
  }

  @NotNull
  private IElementType closeBlockToken(@NotNull IElementType type) {
    zzStartRead = zzMarkedPos - blockLength;
    blockLength = 0;
    return handle(type);
  }

  @NotNull
  private IElementType closePrecedingBlockToken(@NotNull IElementType type) {
    yypushback(yylength());
    zzStartRead = zzMarkedPos - blockLength;
    blockLength = 0;
    return handle(type);
  }

  @Nullable
  private IElementType closePrecedingBlockToken(int nextState, @NotNull IElementType type) {
    yybegin(nextState);
    yypushback(yylength());

    if (blockLength == 0) return null;
    zzStartRead = zzMarkedPos - blockLength;
    blockLength = 0;
    return handle(type);
  }

  @NotNull
  private IElementType closePrecedingBlockOrHandle(@NotNull IElementType blockTokenType, @NotNull IElementType currentType) {
    return blockLength != 0 ? closePrecedingBlockToken(blockTokenType) : handle(currentType);
  }

  private boolean isFullHeredoc() {
      return !StringUtil.startsWithChar(heredocIds.peekFirst(), '\'');
  }

  @NotNull
  private IElementType consumeHeredocStartId() {
    CharSequence text = yytext();
    heredocIds.offer(text.toString());
    yybegin(HEREDOC_HEADER);
    return handle(CR_HEREDOC_START_ID);
  }

  private void startHeredocBody() {
    blockLength = 0;
    yybegin(HEREDOC_BODY);
  }

  @Nullable
  private IElementType consumeHeredocPortion(boolean isEof) {
    CharSequence text = yytext();
    if (StringUtil.equals(StringUtil.trimLeading(text), StringUtil.unquoteString(heredocIds.getFirst()))) {
      heredocIds.pop();
      yypushback(yylength());
      zzStartRead = zzMarkedPos - blockLength;
      yybegin(HEREDOC_END_ID);
      return handle(CR_HEREDOC_BODY);
    }
    else {
      blockLength += yylength();
      if (isEof) {
        heredocIds.clear();
        zzStartRead = zzMarkedPos - blockLength;
        return handle(CR_HEREDOC_BODY);
      }
      return null;
    }
  }

  @NotNull
  private IElementType consumeHeredocEndId() {
    if (heredocIds.isEmpty()) {
      yypop();
    }
    else {
      yybegin(HEREDOC_HEADER);
    }
    return handle(CR_HEREDOC_END_ID);
  }

  @NotNull IElementType handleSlash() {
    if (lexerState.wantsDefOrMacroName) return handle(CR_DIV_OP);
    if (lexerState.slashIsRegex) return startRegex();
    if (eof() || isAsciiWhitespace(zzBuffer.charAt(zzMarkedPos))) return handle(CR_DIV_OP);
    if (lexerState.wantsRegex) return startRegex();
    return handle(CR_DIV_OP);
  }

  private boolean isAsciiWhitespace(char c) {
      return c == ' ' || (c >= 9 && c <= 13);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CrystalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { IElementType type = consumeHeredocPortion(zzInput == YYEOF);
    if (type != null) return type;
            } 
            // fall through
          case 197: break;
          case 2: 
            { return consumeHeredocEndId();
            } 
            // fall through
          case 198: break;
          case 3: 
            { return handle(CR_BAD_CHARACTER);
            } 
            // fall through
          case 199: break;
          case 4: 
            { return handle(CR_WHITESPACE);
            } 
            // fall through
          case 200: break;
          case 5: 
            { return handle(CR_NEWLINE);
            } 
            // fall through
          case 201: break;
          case 6: 
            { return handle(CR_LINE_COMMENT);
            } 
            // fall through
          case 202: break;
          case 7: 
            { if (yycharat(yylength() - 1) == '=') yypushback(1);
    boolean isConst = Character.isUpperCase(yycharat(0));
    char lastChar = yycharat(yylength() - 1);
    if (isConst && (lastChar == '?' || lastChar == '!')) yypushback(1);
    return handle(isConst ? CR_CONSTANT : CR_IDENTIFIER);
            } 
            // fall through
          case 203: break;
          case 8: 
            { return handle(CR_INTEGER_LITERAL);
            } 
            // fall through
          case 204: break;
          case 9: 
            { return handle(CR_UNDERSCORE);
            } 
            // fall through
          case 205: break;
          case 10: 
            { return handle(CR_MINUS_OP);
            } 
            // fall through
          case 206: break;
          case 11: 
            { return handle(CR_DOT);
            } 
            // fall through
          case 207: break;
          case 12: 
            { return handle(CR_LBRACE);
            } 
            // fall through
          case 208: break;
          case 13: 
            { return handle(CR_RBRACE);
            } 
            // fall through
          case 209: break;
          case 14: 
            { return pushAndHandle(CHAR_LITERAL_BODY, CR_CHAR_START);
            } 
            // fall through
          case 210: break;
          case 15: 
            { return pushAndHandle(STRING_LITERAL_BODY, CR_STRING_START);
            } 
            // fall through
          case 211: break;
          case 16: 
            { return handleSlash();
            } 
            // fall through
          case 212: break;
          case 17: 
            { return handle(CR_LBRACKET);
            } 
            // fall through
          case 213: break;
          case 18: 
            { return handle(CR_PLUS_OP);
            } 
            // fall through
          case 214: break;
          case 19: 
            { return handle(CR_MUL_OP);
            } 
            // fall through
          case 215: break;
          case 20: 
            { return handle(CR_ASSIGN_OP);
            } 
            // fall through
          case 216: break;
          case 21: 
            { return handle(CR_COMPLEMENT_OP);
            } 
            // fall through
          case 217: break;
          case 22: 
            { return handle(CR_NOT_OP);
            } 
            // fall through
          case 218: break;
          case 23: 
            { return handle(CR_LESS_OP);
            } 
            // fall through
          case 219: break;
          case 24: 
            { return handle(CR_GREATER_OP);
            } 
            // fall through
          case 220: break;
          case 25: 
            { return handle(CR_AND_OP);
            } 
            // fall through
          case 221: break;
          case 26: 
            { return handle(CR_OR_OP);
            } 
            // fall through
          case 222: break;
          case 27: 
            { return handle(CR_XOR_OP);
            } 
            // fall through
          case 223: break;
          case 28: 
            { if (lexerState.wantsDefOrMacroName) return handle(CR_MOD_OP);
    yypushback(1);
    yybegin(PERCENT);
            } 
            // fall through
          case 224: break;
          case 29: 
            { return handle(CR_RBRACKET);
            } 
            // fall through
          case 225: break;
          case 30: 
            { return handle(CR_QUESTION);
            } 
            // fall through
          case 226: break;
          case 31: 
            { return handle(CR_LPAREN);
            } 
            // fall through
          case 227: break;
          case 32: 
            { return handle(CR_RPAREN);
            } 
            // fall through
          case 228: break;
          case 33: 
            { return lexerState.wantsDefOrMacroName ? handle(CR_BACKQUOTE) : pushAndHandle(COMMAND_LITERAL_BODY, CR_COMMAND_START);
            } 
            // fall through
          case 229: break;
          case 34: 
            { return handle(CR_COLON);
            } 
            // fall through
          case 230: break;
          case 35: 
            { return handle(CR_COMMA);
            } 
            // fall through
          case 231: break;
          case 36: 
            { return handle(CR_SEMICOLON);
            } 
            // fall through
          case 232: break;
          case 37: 
            { yypop(); yypushback(yylength());
            } 
            // fall through
          case 233: break;
          case 38: 
            { return consumeHeredocStartId();
            } 
            // fall through
          case 234: break;
          case 39: 
            { startHeredocBody(); return handle(CR_NEWLINE);
            } 
            // fall through
          case 235: break;
          case 40: 
            { return handle(CR_CHAR_RAW);
            } 
            // fall through
          case 236: break;
          case 41: 
            { return handle(CR_BAD_ESCAPE);
            } 
            // fall through
          case 237: break;
          case 42: 
            { yypop(); return handle(CR_CHAR_END);
            } 
            // fall through
          case 238: break;
          case 43: 
            { CharSequence text = yytext();
    char lastChar = zzBuffer.charAt(zzMarkedPos - 1);
    if ((lastChar == '!' || lastChar == '=') && zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '=') {
      yypushback(1);
    }
    yypop();
    return handle(CR_STRING_RAW);
            } 
            // fall through
          case 239: break;
          case 44: 
            { yypop(); return handle(CR_STRING_RAW);
            } 
            // fall through
          case 240: break;
          case 45: 
            { yybegin(SYMBOL_BODY); return handle(CR_STRING_START);
            } 
            // fall through
          case 241: break;
          case 46: 
            { return handle(CR_STRING_RAW);
            } 
            // fall through
          case 242: break;
          case 47: 
            { yypop(); return handle(CR_STRING_END);
            } 
            // fall through
          case 243: break;
          case 48: 
            { extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 244: break;
          case 49: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_BAD_ESCAPE);
            } 
            // fall through
          case 245: break;
          case 50: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_STRING_END);
            } 
            // fall through
          case 246: break;
          case 51: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_COMMAND_END);
            } 
            // fall through
          case 247: break;
          case 52: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_REGEX_END);
            } 
            // fall through
          case 248: break;
          case 53: 
            { yypushback(yylength()); yypop();
            } 
            // fall through
          case 249: break;
          case 54: 
            { return handle(CR_CHAR_CODE);
            } 
            // fall through
          case 250: break;
          case 55: 
            { yypop(); return handle(CR_UNICODE_BLOCK_END);
            } 
            // fall through
          case 251: break;
          case 56: 
            { return CR_NEWLINE;
            } 
            // fall through
          case 252: break;
          case 57: 
            { incBlock(); return handle(CR_LBRACE);
            } 
            // fall through
          case 253: break;
          case 58: 
            { decBlock(); return isBlockFinished() ? exitBlock() : handle(CR_RBRACE);
            } 
            // fall through
          case 254: break;
          case 59: 
            { if (!(yystate() == REGEX_BLOCK && zzStartRead > 0 && yycharat(-1) == '\\')) incBlock();
    extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 255: break;
          case 60: 
            { if (!(yystate() == REGEX_BLOCK && zzStartRead > 0 && yycharat(-1) == '\\')) decBlock();
    if (isBlockFinished()) {
      IElementType type = closePrecedingBlockToken(BLOCK_END, CR_STRING_RAW);
      if (type != null) return type;
    }
    else {
      extendBlock();
      if (eof()) return closeBlockToken(CR_STRING_RAW);
    }
            } 
            // fall through
          case 256: break;
          case 61: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_WHITESPACE);
            } 
            // fall through
          case 257: break;
          case 62: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_NEWLINE);
            } 
            // fall through
          case 258: break;
          case 63: 
            { return exitBlock();
            } 
            // fall through
          case 259: break;
          case 64: 
            { return beginAndHandle(YYINITIAL, CR_MOD_OP);
            } 
            // fall through
          case 260: break;
          case 65: 
            { return handle(CR_MOD_OP);
            } 
            // fall through
          case 261: break;
          case 66: 
            { return handle(CR_LINE_CONTINUATION);
            } 
            // fall through
          case 262: break;
          case 67: 
            { return handle(CR_OF);
            } 
            // fall through
          case 263: break;
          case 68: 
            { return handle(CR_IF);
            } 
            // fall through
          case 264: break;
          case 69: 
            { return handle(CR_IN);
            } 
            // fall through
          case 265: break;
          case 70: 
            { return handle(CR_MINUS_ASSIGN_OP);
            } 
            // fall through
          case 266: break;
          case 71: 
            { return handle(CR_ARROW_OP);
            } 
            // fall through
          case 267: break;
          case 72: 
            { return handle(CR_INCL_RANGE_OP);
            } 
            // fall through
          case 268: break;
          case 73: 
            { return handle(CR_AS);
            } 
            // fall through
          case 269: break;
          case 74: 
            { if (lexerState.wantsDefOrMacroName || !lexerState.slashIsRegex) return handle(CR_FLOOR_DIV_OP);
    yypushback(1);
    return handleSlash();
            } 
            // fall through
          case 270: break;
          case 75: 
            { if (!lexerState.slashIsRegex) return handle(CR_DIV_ASSIGN_OP);
    yypushback(1);
    return handleSlash();
            } 
            // fall through
          case 271: break;
          case 76: 
            { return handle(CR_INDEXED_OP);
            } 
            // fall through
          case 272: break;
          case 77: 
            { return handle(CR_PLUS_ASSIGN_OP);
            } 
            // fall through
          case 273: break;
          case 78: 
            { if (lexerState.typeMode) {
      yypushback(1);
      return handle(CR_MUL_OP);
    }
    return handle(CR_EXP_OP);
            } 
            // fall through
          case 274: break;
          case 79: 
            { return handle(CR_MUL_ASSIGN_OP);
            } 
            // fall through
          case 275: break;
          case 80: 
            { return handle(CR_EQUAL_OP);
            } 
            // fall through
          case 276: break;
          case 81: 
            { return handle(CR_MATCH_OP);
            } 
            // fall through
          case 277: break;
          case 82: 
            { return handle(CR_BIG_ARROW_OP);
            } 
            // fall through
          case 278: break;
          case 83: 
            { return handle(CR_NON_EQUAL_OP);
            } 
            // fall through
          case 279: break;
          case 84: 
            { return handle(CR_NON_MATCH_OP);
            } 
            // fall through
          case 280: break;
          case 85: 
            { return handle(CR_LESS_EQUAL_OP);
            } 
            // fall through
          case 281: break;
          case 86: 
            { return handle(CR_LSHIFT_OP);
            } 
            // fall through
          case 282: break;
          case 87: 
            { return handle(CR_GREATER_EQUAL_OP);
            } 
            // fall through
          case 283: break;
          case 88: 
            { return handle(CR_RSHIFT_OP);
            } 
            // fall through
          case 284: break;
          case 89: 
            { return handle(CR_WRAP_MINUS_OP);
            } 
            // fall through
          case 285: break;
          case 90: 
            { return handle(CR_WRAP_PLUS_OP);
            } 
            // fall through
          case 286: break;
          case 91: 
            { return handle(CR_WRAP_MUL_OP);
            } 
            // fall through
          case 287: break;
          case 92: 
            { return handle(CR_AND_ASSIGN_OP);
            } 
            // fall through
          case 288: break;
          case 93: 
            { return handle(CR_ANDAND_OP);
            } 
            // fall through
          case 289: break;
          case 94: 
            { return handle(CR_OR_ASSIGN_OP);
            } 
            // fall through
          case 290: break;
          case 95: 
            { return handle(CR_OROR_OP);
            } 
            // fall through
          case 291: break;
          case 96: 
            { return handle(CR_XOR_ASSIGN_OP);
            } 
            // fall through
          case 292: break;
          case 97: 
            { return handle(CR_GLOBAL_VAR);
            } 
            // fall through
          case 293: break;
          case 98: 
            { return handle(CR_INSTANCE_VAR);
            } 
            // fall through
          case 294: break;
          case 99: 
            { return handle(CR_ANNO_LBRACKET);
            } 
            // fall through
          case 295: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (lexerState.wantsSymbol) {
      yypushbegin(SYMBOL);
      return handle(CR_SYMBOL_START);
    }
    return handle(CR_COLON);
            } 
            // fall through
          case 296: break;
          case 101: 
            { return handle(CR_PATH_OP);
            } 
            // fall through
          case 297: break;
          case 102: 
            { return handle(CR_DO);
            } 
            // fall through
          case 298: break;
          case 103: 
            { if (isFullHeredoc()) {
      return blockLength != 0
        ? closePrecedingBlockToken(CR_HEREDOC_BODY)
        : enterBlock(INTERPOLATION_BLOCK, CR_INTERPOLATION_START, CR_INTERPOLATION_END);
    }
    IElementType type = consumeHeredocPortion(zzInput == YYEOF);
    if (type != null) return type;
            } 
            // fall through
          case 299: break;
          case 104: 
            { return handle(CR_ESCAPE);
            } 
            // fall through
          case 300: break;
          case 105: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_ESCAPE);
            } 
            // fall through
          case 301: break;
          case 106: 
            { return blockLength != 0
      ? closePrecedingBlockToken(CR_STRING_RAW)
      : enterBlock(INTERPOLATION_BLOCK, CR_INTERPOLATION_START, CR_INTERPOLATION_END);
            } 
            // fall through
          case 302: break;
          case 107: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_LINE_CONTINUATION);
            } 
            // fall through
          case 303: break;
          case 108: 
            { BlockKind kind = blockKindByStartEndChar(yycharat(1));
    if (isInBlockOf(kind)) return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_ESCAPE);

    yypushback(1);
    extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 304: break;
          case 109: 
            { return enterBlock(STRING_BLOCK, CR_STRING_START, CR_STRING_END);
            } 
            // fall through
          case 305: break;
          case 110: 
            { return beginAndHandle(YYINITIAL, CR_MOD_ASSIGN_OP);
            } 
            // fall through
          case 306: break;
          case 111: 
            { return handle(CR_FLOAT_LITERAL);
            } 
            // fall through
          case 307: break;
          case 112: 
            { return handle(CR_OUT);
            } 
            // fall through
          case 308: break;
          case 113: 
            { return handle(CR_FOR);
            } 
            // fall through
          case 309: break;
          case 114: 
            { return handle(CR_FUN);
            } 
            // fall through
          case 310: break;
          case 115: 
            { return handle(CR_END);
            } 
            // fall through
          case 311: break;
          case 116: 
            { return handle(CR_EXCL_RANGE_OP);
            } 
            // fall through
          case 312: break;
          case 117: 
            { return handle(CR_AS_QUESTION);
            } 
            // fall through
          case 313: break;
          case 118: 
            { return handle(CR_ASM);
            } 
            // fall through
          case 314: break;
          case 119: 
            { if (lexerState.wantsDefOrMacroName || !lexerState.slashIsRegex) return handle(CR_FLOOR_DIV_ASSIGN_OP);
    yypushback(2);
    return handleSlash();
            } 
            // fall through
          case 315: break;
          case 120: 
            { return handle(CR_INDEXED_SET_OP);
            } 
            // fall through
          case 316: break;
          case 121: 
            { return handle(CR_INDEXED_CHECK_OP);
            } 
            // fall through
          case 317: break;
          case 122: 
            { return handle(CR_EXP_ASSIGN_OP);
            } 
            // fall through
          case 318: break;
          case 123: 
            { return handle(CR_CASE_EQUAL_OP);
            } 
            // fall through
          case 319: break;
          case 124: 
            { return handle(CR_COMPARE_OP);
            } 
            // fall through
          case 320: break;
          case 125: 
            { return pushAndHandle(HEREDOC_START_ID, CR_HEREDOC_START);
            } 
            // fall through
          case 321: break;
          case 126: 
            { return handle(CR_LSHIFT_ASSIGN_OP);
            } 
            // fall through
          case 322: break;
          case 127: 
            { return handle(CR_RSHIFT_ASSIGN_OP);
            } 
            // fall through
          case 323: break;
          case 128: 
            { return handle(CR_WRAP_MINUS_ASSIGN_OP);
            } 
            // fall through
          case 324: break;
          case 129: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypushback(1); return handle(CR_AND_OP);
            } 
            // fall through
          case 325: break;
          case 130: 
            { return handle(CR_WRAP_PLUS_ASSIGN_OP);
            } 
            // fall through
          case 326: break;
          case 131: 
            { return handle(CR_WRAP_EXP_OP);
            } 
            // fall through
          case 327: break;
          case 132: 
            { return handle(CR_WRAP_MUL_ASSIGN_OP);
            } 
            // fall through
          case 328: break;
          case 133: 
            { return handle(CR_ANDAND_ASSIGN_OP);
            } 
            // fall through
          case 329: break;
          case 134: 
            { return handle(CR_OROR_ASSIGN_OP);
            } 
            // fall through
          case 330: break;
          case 135: 
            { return handle(CR_CLASS_VAR);
            } 
            // fall through
          case 331: break;
          case 136: 
            { return handle(CR_LIB);
            } 
            // fall through
          case 332: break;
          case 137: 
            { return handle(CR_NIL);
            } 
            // fall through
          case 333: break;
          case 138: 
            { return handle(CR_DEF);
            } 
            // fall through
          case 334: break;
          case 139: 
            { yypushbegin(CHAR_UNICODE_BLOCK); return handle(CR_UNICODE_BLOCK_START);
            } 
            // fall through
          case 335: break;
          case 140: 
            { yypushbegin(STRING_UNICODE_BLOCK); return handle(CR_UNICODE_BLOCK_START);
            } 
            // fall through
          case 336: break;
          case 141: 
            { return enterBlock(STRING_BLOCK, CR_COMMAND_START, CR_COMMAND_END);
            } 
            // fall through
          case 337: break;
          case 142: 
            { return enterBlock(STRING_ARRAY_BLOCK, CR_SYMBOL_ARRAY_START, CR_SYMBOL_ARRAY_END);
            } 
            // fall through
          case 338: break;
          case 143: 
            { return enterBlock(SIMPLE_STRING_BLOCK, CR_STRING_START, CR_STRING_END);
            } 
            // fall through
          case 339: break;
          case 144: 
            { return enterBlock(REGEX_BLOCK, CR_REGEX_START, CR_REGEX_END);
            } 
            // fall through
          case 340: break;
          case 145: 
            { return enterBlock(STRING_ARRAY_BLOCK, CR_STRING_ARRAY_START, CR_STRING_ARRAY_END);
            } 
            // fall through
          case 341: break;
          case 146: 
            { return handle(CR_ELSE);
            } 
            // fall through
          case 342: break;
          case 147: 
            { return handle(CR_ENUM);
            } 
            // fall through
          case 343: break;
          case 148: 
            { return handle(CR_WITH);
            } 
            // fall through
          case 344: break;
          case 149: 
            { return handle(CR_WHEN);
            } 
            // fall through
          case 345: break;
          case 150: 
            { return handle(CR_SELF);
            } 
            // fall through
          case 346: break;
          case 151: 
            { return handle(CR_TRUE);
            } 
            // fall through
          case 347: break;
          case 152: 
            { return handle(CR_THEN);
            } 
            // fall through
          case 348: break;
          case 153: 
            { return handle(CR_TYPE);
            } 
            // fall through
          case 349: break;
          case 154: 
            { return handle(CR_CASE);
            } 
            // fall through
          case 350: break;
          case 155: 
            { return handle(CR_IS_NIL);
            } 
            // fall through
          case 351: break;
          case 156: 
            { return handle(CR_NEXT);
            } 
            // fall through
          case 352: break;
          case 157: 
            { return handle(CR_BEGIN);
            } 
            // fall through
          case 353: break;
          case 158: 
            { return handle(CR_BREAK);
            } 
            // fall through
          case 354: break;
          case 159: 
            { return handle(CR_IS_A);
            } 
            // fall through
          case 355: break;
          case 160: 
            { return handle(CR_UNION);
            } 
            // fall through
          case 356: break;
          case 161: 
            { return handle(CR_UNTIL);
            } 
            // fall through
          case 357: break;
          case 162: 
            { return handle(CR_FALSE);
            } 
            // fall through
          case 358: break;
          case 163: 
            { return handle(CR_ELSIF);
            } 
            // fall through
          case 359: break;
          case 164: 
            { return handle(CR_ALIAS);
            } 
            // fall through
          case 360: break;
          case 165: 
            { return handle(CR_WHILE);
            } 
            // fall through
          case 361: break;
          case 166: 
            { return handle(CR_SUPER);
            } 
            // fall through
          case 362: break;
          case 167: 
            { return handle(CR_SELF_NIL);
            } 
            // fall through
          case 363: break;
          case 168: 
            { return handle(CR_CLASS);
            } 
            // fall through
          case 364: break;
          case 169: 
            { return handle(CR_YIELD);
            } 
            // fall through
          case 365: break;
          case 170: 
            { return handle(CR_UNLESS);
            } 
            // fall through
          case 366: break;
          case 171: 
            { return handle(CR_FORALL);
            } 
            // fall through
          case 367: break;
          case 172: 
            { return handle(CR_EXTEND);
            } 
            // fall through
          case 368: break;
          case 173: 
            { return handle(CR_ENSURE);
            } 
            // fall through
          case 369: break;
          case 174: 
            { return handle(CR_RESCUE);
            } 
            // fall through
          case 370: break;
          case 175: 
            { return handle(CR_RETURN);
            } 
            // fall through
          case 371: break;
          case 176: 
            { return handle(CR_MODULE);
            } 
            // fall through
          case 372: break;
          case 177: 
            { return handle(CR_SIZEOF);
            } 
            // fall through
          case 373: break;
          case 178: 
            { return handle(CR_SELECT);
            } 
            // fall through
          case 374: break;
          case 179: 
            { return handle(CR_STRUCT);
            } 
            // fall through
          case 375: break;
          case 180: 
            { return handle(CR_TYPEOF);
            } 
            // fall through
          case 376: break;
          case 181: 
            { return handle(CR_DIR_);
            } 
            // fall through
          case 377: break;
          case 182: 
            { return handle(CR_INCLUDE);
            } 
            // fall through
          case 378: break;
          case 183: 
            { return handle(CR_REQUIRE);
            } 
            // fall through
          case 379: break;
          case 184: 
            { return handle(CR_PRIVATE);
            } 
            // fall through
          case 380: break;
          case 185: 
            { return handle(CR_LINE_);
            } 
            // fall through
          case 381: break;
          case 186: 
            { return handle(CR_FILE_);
            } 
            // fall through
          case 382: break;
          case 187: 
            { return handle(CR_OFFSETOF);
            } 
            // fall through
          case 383: break;
          case 188: 
            { return handle(CR_VERBATIM);
            } 
            // fall through
          case 384: break;
          case 189: 
            { return handle(CR_ABSTRACT);
            } 
            // fall through
          case 385: break;
          case 190: 
            { return handle(CR_POINTEROF);
            } 
            // fall through
          case 386: break;
          case 191: 
            { return handle(CR_PROTECTED);
            } 
            // fall through
          case 387: break;
          case 192: 
            { return handle(CR_ANNOTATION);
            } 
            // fall through
          case 388: break;
          case 193: 
            { return handle(CR_END_LINE_);
            } 
            // fall through
          case 389: break;
          case 194: 
            { return handle(CR_RESPONDS_TO);
            } 
            // fall through
          case 390: break;
          case 195: 
            { return handle(CR_UNINITIALIZED);
            } 
            // fall through
          case 391: break;
          case 196: 
            { return handle(CR_INSTANCE_SIZEOF);
            } 
            // fall through
          case 392: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
