/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.crystal.intellij.lexer;

import com.intellij.openapi.util.text.StringUtil;
import com.intellij.util.text.CharArrayUtil;
import com.intellij.psi.tree.IElementType;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import it.unimi.dsi.fastutil.ints.IntStack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayDeque;
import java.util.Deque;

import org.crystal.intellij.config.LanguageLevel;

import static org.crystal.intellij.config.LanguageLevel.*;
import static org.crystal.intellij.lexer.TokenTypesKt.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Crystal13.flex</tt>
 */
public class _CrystalLexer13 extends CrystalLexerBase {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HEREDOC_START_ID = 2;
  public static final int HEREDOC_HEADER = 4;
  public static final int HEREDOC_BODY = 6;
  public static final int HEREDOC_END_ID = 8;
  public static final int CHAR_LITERAL_BODY = 10;
  public static final int SYMBOL = 12;
  public static final int SYMBOL_BODY = 14;
  public static final int STRING_LITERAL_BODY = 16;
  public static final int COMMAND_LITERAL_BODY = 18;
  public static final int REGEX_LITERAL_BODY = 20;
  public static final int CHAR_UNICODE_BLOCK = 22;
  public static final int STRING_UNICODE_BLOCK = 24;
  public static final int INTERPOLATION_BLOCK = 26;
  public static final int SIMPLE_STRING_BLOCK = 28;
  public static final int STRING_BLOCK = 30;
  public static final int REGEX_BLOCK = 32;
  public static final int STRING_ARRAY_BLOCK = 34;
  public static final int MACRO_WHITESPACE_ESCAPE = 36;
  public static final int MACRO_SKIP_WHITESPACES = 38;
  public static final int MACRO_START = 40;
  public static final int MACRO_CONTROL_KEYWORD = 42;
  public static final int MACRO_START_CONTROL_KEYWORD = 44;
  public static final int MACRO_END_CONTROL_KEYWORD = 46;
  public static final int MACRO_CHECK_COMMENT = 48;
  public static final int MACRO_COMMENT = 50;
  public static final int MACRO_NO_DELIMITER = 52;
  public static final int MACRO_END_KEYWORD = 54;
  public static final int MACRO_MAIN = 56;
  public static final int MACRO_CHECK_HEREDOC_START = 58;
  public static final int MACRO_CHECK_HEREDOC_END = 60;
  public static final int MACRO_CHECK_KEYWORD = 62;
  public static final int MACRO_CHECK_KEYWORD2 = 64;
  public static final int MACRO_POSTPROCESS_DELIMITER_STATE = 66;
  public static final int MACRO_GENERAL_LITERAL = 68;
  public static final int BLOCK_END = 70;
  public static final int PERCENT = 72;
  public static final int LOOKAHEAD = 74;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\17\100\u0100\200");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\100\4");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\2\2\1\3\22\0\1\1\1\45\1\63\1\6\1\60\1\53\1\50\1\62\1\64\1\65"+
    "\1\41\1\40\1\105\1\31\1\32\1\42\1\13\1\12\1\25\1\24\1\26\1\11\1\23\1\11\1"+
    "\22\1\10\1\57\1\106\1\46\1\43\1\47\1\55\1\61\3\7\1\112\1\115\1\120\2\56\1"+
    "\113\2\56\1\117\1\56\1\116\2\56\1\67\1\114\10\56\1\37\1\5\1\54\1\52\1\15\1"+
    "\104\1\34\1\17\1\74\1\100\1\30\1\27\1\77\1\103\1\20\1\56\1\107\1\75\1\101"+
    "\1\76\1\16\1\111\1\66\1\70\1\72\1\73\1\21\1\33\1\71\1\14\1\102\1\110\1\35"+
    "\1\51\1\36\1\44\40\0\141\56\100\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\6\0\2\1\5\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\0\1\14\1\17\1\20\1\21"+
    "\4\0\1\22\1\23\1\24\1\22\1\25\1\26\2\27"+
    "\1\30\6\26\1\31\1\32\2\26\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\22"+
    "\1\55\1\56\1\57\1\60\12\26\1\61\1\62\1\63"+
    "\1\26\1\64\1\0\2\65\4\2\2\3\1\66\1\67"+
    "\1\70\1\71\1\72\1\0\2\72\1\0\4\72\1\73"+
    "\3\74\1\75\1\76\1\77\1\76\1\100\1\76\1\101"+
    "\2\76\1\102\1\103\1\104\1\105\1\106\1\107\1\76"+
    "\1\110\1\111\2\76\1\112\1\113\1\76\1\0\1\114"+
    "\1\0\1\115\4\0\1\116\1\117\1\120\1\121\2\0"+
    "\1\122\1\123\1\124\1\125\1\0\1\126\1\127\1\130"+
    "\1\124\1\131\1\14\1\132\16\0\1\133\1\134\1\133"+
    "\1\135\1\136\1\44\1\137\1\54\2\140\2\26\7\0"+
    "\2\26\1\141\2\26\1\142\1\26\1\143\7\26\1\144"+
    "\1\145\1\146\2\26\1\147\2\26\1\150\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162"+
    "\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\205\1\206\1\207\1\0\17\26\1\210"+
    "\6\26\1\0\1\211\1\212\1\213\1\214\1\71\3\72"+
    "\1\215\1\216\1\217\1\220\1\221\1\222\2\223\1\222"+
    "\2\215\1\103\1\215\1\224\1\225\2\226\1\227\1\230"+
    "\1\231\4\0\7\232\1\233\1\234\1\0\1\235\1\236"+
    "\2\0\1\132\21\0\1\237\2\0\1\240\1\241\1\242"+
    "\4\0\1\166\1\0\1\27\4\0\1\243\1\0\1\243"+
    "\3\27\4\26\1\244\11\26\1\245\1\246\5\26\1\247"+
    "\1\250\2\26\1\251\1\252\2\26\1\253\1\254\1\255"+
    "\1\256\1\257\1\260\1\261\1\262\1\263\1\264\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\204\1\273\17\26"+
    "\1\274\1\275\1\26\1\276\6\26\1\64\1\214\1\277"+
    "\1\216\1\217\1\221\1\300\1\103\1\301\1\0\1\302"+
    "\1\303\1\304\1\305\1\306\1\307\1\310\1\311\1\312"+
    "\12\0\1\313\6\0\1\314\1\315\1\316\1\317\1\320"+
    "\1\0\1\243\22\26\1\321\1\322\11\26\1\323\1\26"+
    "\1\324\2\26\1\325\2\26\1\326\1\327\1\330\1\331"+
    "\1\26\1\332\1\333\6\26\1\214\1\216\1\217\1\221"+
    "\1\103\1\0\1\334\10\0\5\26\1\335\1\336\1\337"+
    "\2\26\1\340\1\26\1\341\2\26\1\342\1\26\1\343"+
    "\3\26\1\344\5\26\1\345\1\26\1\346\1\347\3\26"+
    "\1\350\1\26\1\351\1\352\3\26\1\214\1\216\1\221"+
    "\1\103\5\0\10\26\1\353\1\354\1\355\1\356\4\26"+
    "\1\357\1\26\1\360\1\361\1\362\1\363\1\364\1\365"+
    "\3\26\1\214\1\221\1\103\1\334\2\0\1\366\5\26"+
    "\1\367\4\26\1\370\3\26\1\371\1\0\1\26\1\372"+
    "\1\373\1\374\2\26\1\375\1\376\4\26\1\0\5\26"+
    "\1\377\1\u0100\1\0\3\26\1\u0101\1\26\3\0\4\26"+
    "\1\0\1\u0102\2\26\1\u0103\1\0\1\26\1\u0104\1\u0105"+
    "\1\26\1\u0106";

  private static int [] zzUnpackAction() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u046e\0\u04bf"+
    "\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5\0\u06f6\0\u06f6"+
    "\0\u0747\0\u0798\0\u07e9\0\u083a\0\u088b\0\u08dc\0\u092d\0\u097e"+
    "\0\u09cf\0\u0a20\0\u0a71\0\u0ac2\0\u0b13\0\u0b64\0\u0a20\0\u0bb5"+
    "\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d"+
    "\0\u0e8e\0\u0edf\0\u0f30\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5"+
    "\0\u1116\0\u1167\0\u0a20\0\u11b8\0\u1209\0\u125a\0\u12ab\0\u12fc"+
    "\0\u0a20\0\u134d\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u0a20"+
    "\0\u0a20\0\u0a20\0\u1533\0\u1584\0\u15d5\0\u0a20\0\u0a20\0\u0a20"+
    "\0\u0a20\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u185d\0\u18ae\0\u18ff\0\u0a20\0\u0a20\0\u0a20\0\u1950\0\u19a1"+
    "\0\u19f2\0\u1a43\0\u0a20\0\u1a94\0\u1ae5\0\u1b36\0\u0a20\0\u1b87"+
    "\0\u1bd8\0\u0a20\0\u1c29\0\u0a20\0\u1c7a\0\u0a20\0\u1ccb\0\u1d1c"+
    "\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u0a20\0\u1f53"+
    "\0\u1fa4\0\u1ff5\0\u0a20\0\u2046\0\u2097\0\u20e8\0\u0a20\0\u2139"+
    "\0\u0a20\0\u218a\0\u21db\0\u222c\0\u227d\0\u0a20\0\u22ce\0\u1167"+
    "\0\u0a20\0\u231f\0\u0a20\0\u0a20\0\u2370\0\u23c1\0\u2412\0\u2463"+
    "\0\u24b4\0\u2505\0\u0603\0\u2556\0\u25a7\0\u25f8\0\u2649\0\u269a"+
    "\0\u26eb\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u273c\0\u278d\0\u0a20"+
    "\0\u0a20\0\u27de\0\u282f\0\u2880\0\u0a20\0\u0a20\0\u0a20\0\u28d1"+
    "\0\u0a20\0\u2922\0\u2973\0\u29c4\0\u2a15\0\u2a66\0\u2ab7\0\u2b08"+
    "\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90"+
    "\0\u2de1\0\u0a20\0\u0a20\0\u2e32\0\u0a20\0\u2e83\0\u2ed4\0\u0a20"+
    "\0\u2f25\0\u2f76\0\u2fc7\0\u0a20\0\u3018\0\u3069\0\u30ba\0\u310b"+
    "\0\u315c\0\u31ad\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342\0\u3393"+
    "\0\u33e4\0\u0cf9\0\u3435\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca"+
    "\0\u361b\0\u366c\0\u36bd\0\u0a20\0\u0a20\0\u370e\0\u375f\0\u37b0"+
    "\0\u3801\0\u3852\0\u38a3\0\u0a20\0\u0a20\0\u38f4\0\u0a20\0\u3945"+
    "\0\u0a20\0\u3996\0\u0a20\0\u39e7\0\u0a20\0\u0a20\0\u0a20\0\u0a20"+
    "\0\u3a38\0\u3a89\0\u0a20\0\u3ada\0\u3b2b\0\u3b7c\0\u3bcd\0\u0a20"+
    "\0\u3c1e\0\u0a20\0\u3c6f\0\u0a20\0\u0a20\0\u0a20\0\u3cc0\0\u3d11"+
    "\0\u0a20\0\u3d62\0\u0a20\0\u3db3\0\u3e04\0\u3e55\0\u3ea6\0\u3ef7"+
    "\0\u3f48\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f"+
    "\0\u41d0\0\u4221\0\u4272\0\u0cf9\0\u42c3\0\u4314\0\u4365\0\u43b6"+
    "\0\u4407\0\u4458\0\u44a9\0\u0a20\0\u0a20\0\u0a20\0\u44fa\0\u0a20"+
    "\0\u454b\0\u459c\0\u45ed\0\u0a20\0\u463e\0\u468f\0\u0a20\0\u46e0"+
    "\0\u1f53\0\u4731\0\u4782\0\u0a20\0\u47d3\0\u4824\0\u4875\0\u48c6"+
    "\0\u0a20\0\u0a20\0\u4917\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u4968"+
    "\0\u49b9\0\u4a0a\0\u4a5b\0\u4aac\0\u4afd\0\u4b4e\0\u4b9f\0\u4bf0"+
    "\0\u4c41\0\u4c92\0\u0a20\0\u0a20\0\u4ce3\0\u0a20\0\u0a20\0\u4d34"+
    "\0\u4d85\0\u0a20\0\u4dd6\0\u4e27\0\u4e78\0\u4ec9\0\u4f1a\0\u4f6b"+
    "\0\u4fbc\0\u500d\0\u505e\0\u50af\0\u5100\0\u5151\0\u51a2\0\u51f3"+
    "\0\u5244\0\u5295\0\u52e6\0\u0a20\0\u5337\0\u5388\0\u0a20\0\u0a20"+
    "\0\u0a20\0\u53d9\0\u542a\0\u547b\0\u54cc\0\u551d\0\u556e\0\u0a20"+
    "\0\u55bf\0\u5610\0\u5661\0\u56b2\0\u5703\0\u5754\0\u57a5\0\u57f6"+
    "\0\u5847\0\u5898\0\u58e9\0\u593a\0\u598b\0\u59dc\0\u0cf9\0\u5a2d"+
    "\0\u5a7e\0\u5acf\0\u5b20\0\u5b71\0\u5bc2\0\u5c13\0\u5c64\0\u5cb5"+
    "\0\u5d06\0\u0cf9\0\u5d57\0\u5da8\0\u5df9\0\u5e4a\0\u5e9b\0\u0cf9"+
    "\0\u0a20\0\u5eec\0\u5f3d\0\u3018\0\u0cf9\0\u5f8e\0\u5fdf\0\u0a20"+
    "\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20"+
    "\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20"+
    "\0\u6030\0\u6081\0\u60d2\0\u6123\0\u6174\0\u61c5\0\u6216\0\u6267"+
    "\0\u62b8\0\u6309\0\u635a\0\u63ab\0\u63fc\0\u644d\0\u649e\0\u64ef"+
    "\0\u0cf9\0\u6540\0\u6591\0\u0cf9\0\u65e2\0\u6633\0\u6684\0\u66d5"+
    "\0\u6726\0\u6777\0\u0a20\0\u67c8\0\u0a20\0\u6819\0\u686a\0\u68bb"+
    "\0\u0a20\0\u690c\0\u695d\0\u69ae\0\u0a20\0\u0a20\0\u0a20\0\u0a20"+
    "\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u69ff\0\u6a50\0\u6aa1"+
    "\0\u6af2\0\u6b43\0\u6b94\0\u6be5\0\u6c36\0\u6c87\0\u6cd8\0\u0a20"+
    "\0\u6d29\0\u6d7a\0\u6dcb\0\u6e1c\0\u6e6d\0\u6ebe\0\u0a20\0\u0a20"+
    "\0\u0a20\0\u0a20\0\u0a20\0\u6f0f\0\u0a20\0\u6f60\0\u6fb1\0\u7002"+
    "\0\u7053\0\u70a4\0\u70f5\0\u7146\0\u7197\0\u71e8\0\u7239\0\u728a"+
    "\0\u72db\0\u732c\0\u737d\0\u73ce\0\u741f\0\u7470\0\u74c1\0\u0cf9"+
    "\0\u0cf9\0\u7512\0\u7563\0\u75b4\0\u7605\0\u7656\0\u76a7\0\u76f8"+
    "\0\u7749\0\u779a\0\u0cf9\0\u77eb\0\u0cf9\0\u783c\0\u788d\0\u78de"+
    "\0\u792f\0\u7980\0\u0cf9\0\u79d1\0\u0cf9\0\u0cf9\0\u7a22\0\u3018"+
    "\0\u0cf9\0\u7a73\0\u7ac4\0\u7b15\0\u7b66\0\u7bb7\0\u7c08\0\u7c59"+
    "\0\u7caa\0\u0a20\0\u7cfb\0\u7d4c\0\u7d9d\0\u7dee\0\u7e3f\0\u7e90"+
    "\0\u7ee1\0\u7f32\0\u7f83\0\u7fd4\0\u8025\0\u8076\0\u80c7\0\u8118"+
    "\0\u8169\0\u81ba\0\u820b\0\u0cf9\0\u0cf9\0\u3018\0\u825c\0\u82ad"+
    "\0\u0cf9\0\u82fe\0\u0cf9\0\u834f\0\u83a0\0\u0cf9\0\u83f1\0\u0cf9"+
    "\0\u8442\0\u8493\0\u84e4\0\u0cf9\0\u8535\0\u8586\0\u85d7\0\u8628"+
    "\0\u8679\0\u0cf9\0\u86ca\0\u0cf9\0\u3018\0\u871b\0\u876c\0\u87bd"+
    "\0\u0cf9\0\u880e\0\u0cf9\0\u0cf9\0\u885f\0\u88b0\0\u8901\0\u8952"+
    "\0\u0a20\0\u89a3\0\u89f4\0\u8a45\0\u8a96\0\u8ae7\0\u8b38\0\u8b89"+
    "\0\u8bda\0\u8c2b\0\u8c7c\0\u8ccd\0\u8d1e\0\u8d6f\0\u8dc0\0\u8e11"+
    "\0\u0cf9\0\u0cf9\0\u0cf9\0\u0cf9\0\u8e62\0\u8eb3\0\u8f04\0\u8f55"+
    "\0\u0cf9\0\u8fa6\0\u0cf9\0\u0cf9\0\u0cf9\0\u0cf9\0\u0cf9\0\u0cf9"+
    "\0\u8ff7\0\u9048\0\u9099\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u90ea"+
    "\0\u913b\0\u0cf9\0\u918c\0\u91dd\0\u922e\0\u927f\0\u92d0\0\u0cf9"+
    "\0\u9321\0\u9372\0\u93c3\0\u9414\0\u0cf9\0\u9465\0\u94b6\0\u9507"+
    "\0\u0cf9\0\u9558\0\u95a9\0\u0cf9\0\u0cf9\0\u0cf9\0\u95fa\0\u964b"+
    "\0\u0cf9\0\u0cf9\0\u969c\0\u96ed\0\u973e\0\u978f\0\u97e0\0\u9831"+
    "\0\u9882\0\u98d3\0\u9924\0\u9975\0\u0cf9\0\u0cf9\0\u99c6\0\u9a17"+
    "\0\u9a68\0\u9ab9\0\u0cf9\0\u9b0a\0\u9b5b\0\u9bac\0\u9bfd\0\u9c4e"+
    "\0\u9c9f\0\u9cf0\0\u9d41\0\u9d92\0\u0cf9\0\u9de3\0\u9e34\0\u3018"+
    "\0\u9e85\0\u9ed6\0\u0cf9\0\u0a20\0\u9f27\0\u0cf9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\47\1\50\1\47\2\51\1\52\1\53\1\54\3\55"+
    "\1\56\1\54\1\57\1\60\1\61\1\62\1\63\5\55"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\54"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\2\54"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\54"+
    "\1\131\1\132\1\133\1\54\1\134\1\135\1\136\2\54"+
    "\1\137\7\54\7\0\22\140\2\0\2\140\21\0\1\140"+
    "\3\0\1\141\3\0\16\140\3\0\12\140\1\47\1\50"+
    "\1\47\1\142\1\143\2\47\1\54\3\55\1\56\1\54"+
    "\1\57\1\60\1\61\1\62\1\63\5\55\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\54\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\2\54\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\54\1\131\1\132"+
    "\1\133\1\54\1\134\1\135\1\136\2\54\1\137\7\54"+
    "\3\144\1\145\2\144\1\146\26\144\1\147\63\144\3\150"+
    "\1\151\115\150\5\152\1\153\54\152\1\154\36\152\7\0"+
    "\1\155\4\0\6\155\5\0\2\155\1\156\1\0\2\155"+
    "\2\0\1\157\1\156\1\160\1\161\1\162\1\156\1\163"+
    "\1\164\1\165\1\166\3\156\2\0\1\155\4\0\1\167"+
    "\2\0\16\155\3\0\12\155\5\170\1\171\1\172\54\170"+
    "\1\173\35\170\5\174\1\175\1\176\54\174\1\177\35\174"+
    "\5\200\1\175\1\176\75\200\1\201\14\200\5\202\1\203"+
    "\1\176\33\202\1\204\56\202\7\0\5\205\3\0\1\205"+
    "\2\0\7\205\3\0\1\205\1\0\1\206\35\0\1\205"+
    "\3\0\1\205\11\0\1\205\2\0\1\205\2\0\1\205"+
    "\1\0\1\50\5\0\5\205\3\0\1\205\2\0\7\205"+
    "\3\0\1\205\1\0\1\206\35\0\1\205\3\0\1\205"+
    "\11\0\1\205\2\0\1\205\2\0\1\205\1\47\1\50"+
    "\1\47\2\207\2\47\1\54\3\55\1\56\1\54\1\57"+
    "\1\60\1\61\1\62\1\63\5\55\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\210\1\211\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\54\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\2\54\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\54\1\131\1\132\1\133"+
    "\1\54\1\134\1\135\1\136\2\54\1\137\7\54\35\212"+
    "\1\213\1\214\1\213\6\212\1\213\1\214\1\212\1\214"+
    "\2\212\1\214\7\212\1\213\1\214\33\212\5\215\1\175"+
    "\1\176\26\215\1\213\1\214\1\213\6\215\1\213\1\214"+
    "\1\215\1\214\2\215\1\214\7\215\1\213\1\214\40\215"+
    "\1\203\1\176\26\215\1\213\1\214\1\213\6\215\1\213"+
    "\1\214\1\215\1\214\2\215\1\214\7\215\1\213\1\214"+
    "\33\215\1\216\1\217\1\216\2\220\1\221\27\216\1\213"+
    "\1\214\1\213\6\216\1\213\1\214\1\216\1\214\2\216"+
    "\1\214\7\216\1\213\1\214\33\216\5\0\1\222\114\0"+
    "\4\223\121\0\1\224\27\0\1\225\103\0\1\226\1\227"+
    "\5\0\1\230\1\231\77\0\22\232\2\0\2\232\10\0"+
    "\1\232\7\0\2\232\7\0\16\232\3\0\12\232\6\0"+
    "\1\233\116\0\1\234\30\0\1\235\113\0\1\236\22\0"+
    "\1\237\54\0\22\240\2\0\2\240\10\0\1\240\7\0"+
    "\3\240\6\0\16\240\3\0\12\240\4\0\1\241\1\242"+
    "\1\243\21\0\1\244\4\0\1\245\1\246\7\0\1\247"+
    "\4\0\1\250\6\0\2\251\103\0\1\252\52\0\3\253"+
    "\2\0\55\253\1\0\36\253\17\0\1\254\1\0\1\255"+
    "\5\0\1\256\1\257\3\0\1\260\35\0\1\261\1\0"+
    "\1\262\1\263\2\0\1\264\1\265\1\266\36\0\1\267"+
    "\1\270\47\0\1\271\150\0\1\272\4\273\30\272\1\273"+
    "\1\272\1\273\3\272\1\274\20\272\1\273\21\272\1\273"+
    "\12\272\36\0\1\275\10\0\1\275\1\0\1\275\2\0"+
    "\1\275\10\0\1\275\106\0\1\276\45\0\1\47\1\50"+
    "\1\47\2\51\1\52\1\53\1\54\3\55\1\56\1\54"+
    "\1\57\1\60\1\61\1\62\1\63\5\55\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\47\1\100\1\101\1\102\1\277\1\104\1\105"+
    "\1\106\1\107\1\300\1\111\1\112\1\54\1\301\1\114"+
    "\1\115\2\47\1\120\1\121\2\54\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\54\1\131\1\132\1\133"+
    "\1\54\1\47\1\135\1\136\2\54\1\137\7\54\1\0"+
    "\1\50\122\0\2\51\117\0\1\302\1\303\114\0\3\53"+
    "\2\0\114\53\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\10\0\4\55\1\0\1\55\2\0\2\306\5\55"+
    "\1\307\1\310\1\0\1\311\76\0\4\55\1\312\1\55"+
    "\1\313\1\314\2\306\5\55\1\307\1\310\1\0\1\311"+
    "\75\0\6\54\1\315\13\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\12\54\1\316\5\54\1\317\1\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\21\54\1\320\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\2\54\1\321\13\54\3\0\12\54\7\0\20\54"+
    "\1\322\1\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\4\54\1\323\3\54\1\324"+
    "\5\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\10\54"+
    "\1\325\5\54\3\0\12\54\7\0\7\54\1\326\2\54"+
    "\1\327\7\54\2\0\1\54\1\330\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\5\54\1\331\14\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\7\54\1\332"+
    "\1\333\5\54\3\0\12\54\43\0\1\334\3\0\1\335"+
    "\103\0\1\336\75\0\21\54\1\337\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\10\54\1\340\11\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\4\54\1\341\2\54\1\342\1\343\5\54\3\0\12\54"+
    "\35\0\1\344\15\0\1\345\121\0\1\346\107\0\1\347"+
    "\116\0\1\350\1\0\1\351\117\0\1\352\1\353\120\0"+
    "\1\354\1\355\2\0\1\356\114\0\1\357\1\360\117\0"+
    "\1\361\2\0\1\362\115\0\1\363\3\0\1\364\102\0"+
    "\1\365\6\0\1\366\1\367\1\0\1\370\4\0\1\371"+
    "\113\0\1\372\5\0\1\373\112\0\1\374\64\0\1\375"+
    "\4\0\6\375\5\0\3\375\1\0\2\375\2\0\15\375"+
    "\2\0\1\375\1\376\3\0\1\375\2\0\16\375\3\0"+
    "\12\375\7\0\1\377\4\u0100\6\377\5\u0100\2\377\2\0"+
    "\2\377\7\0\1\u0101\10\0\1\u0101\1\377\7\0\16\377"+
    "\3\0\12\377\7\0\1\u0102\4\0\6\u0102\5\0\2\u0102"+
    "\2\0\2\u0102\2\0\1\u0103\16\0\1\u0102\2\0\1\u0104"+
    "\4\0\16\u0102\3\0\12\u0102\7\0\21\54\1\u0105\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\11\54\1\u0106\10\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\15\54\1\u0107\3\0\12\54\7\0\11\54"+
    "\1\u0108\1\u0109\6\54\1\u010a\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u010b"+
    "\10\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\2\54"+
    "\1\u010c\11\54\1\u010d\1\u010e\3\0\12\54\7\0\22\54"+
    "\2\0\1\54\1\u010f\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u0110\6\54\3\0\12\54"+
    "\7\0\11\54\1\u0111\10\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\11\54\1\u0112\7\54\1\u0113\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\7\54\1\u0114\11\54\1\u0115"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\7\54\1\u0116"+
    "\12\54\2\0\1\54\1\u0117\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\11\54\1\u0118\10\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\7\54\1\u0119\12\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\2\54\1\u011a"+
    "\13\54\3\0\12\54\7\0\22\140\2\0\2\140\21\0"+
    "\1\140\7\0\16\140\3\0\12\140\7\0\22\u011b\2\0"+
    "\2\u011b\21\0\1\u011b\7\0\16\u011b\3\0\12\u011b\4\0"+
    "\1\143\114\0\3\144\2\0\1\144\1\0\26\144\1\0"+
    "\66\144\1\0\2\144\1\0\26\144\1\0\63\144\35\0"+
    "\1\u011c\63\0\3\150\2\0\117\150\1\0\115\150\5\0"+
    "\1\u011d\5\0\1\u011d\3\0\1\u011e\1\0\1\u011f\5\0"+
    "\2\u011e\2\0\2\u011e\25\0\1\u011d\5\0\1\u011e\2\0"+
    "\1\u011e\2\0\1\u011e\31\0\22\155\2\0\2\155\6\0"+
    "\1\u0120\1\0\1\u0120\7\0\1\u0120\1\155\7\0\16\155"+
    "\3\0\12\155\54\0\1\u0121\105\0\1\156\121\0\1\156"+
    "\121\0\1\u0122\1\156\117\0\2\156\117\0\1\u0123\2\0"+
    "\1\156\115\0\1\156\3\0\1\156\102\0\1\156\6\0"+
    "\1\156\1\160\57\0\5\170\1\0\55\170\1\0\35\170"+
    "\11\u0124\3\u0125\1\u0126\2\u0124\1\u0127\1\u0124\1\u0128\1\u0124"+
    "\4\u0125\2\u0127\2\u0124\2\u0127\33\u0124\1\u0127\2\u0124\1\u0127"+
    "\2\u0124\1\u0127\22\u0124\5\170\1\0\27\170\1\u0129\25\170"+
    "\1\0\35\170\5\174\2\0\54\174\1\0\35\174\3\u0124"+
    "\1\u012a\1\u012b\4\u0124\3\u0125\1\u0126\2\u0124\1\u0127\1\u0124"+
    "\1\u0128\1\u0124\4\u0125\2\u0127\2\u0124\2\u0127\33\u0124\1\u0127"+
    "\2\u0124\1\u0127\2\u0124\1\u0127\22\u0124\35\0\1\u012c\63\0"+
    "\5\200\2\0\75\200\1\0\14\200\5\202\2\0\33\202"+
    "\1\0\56\202\3\0\1\u012d\1\u012e\35\0\1\u0124\72\0"+
    "\1\204\3\0\1\204\60\0\1\204\26\0\5\u012f\3\0"+
    "\1\u012f\2\0\7\u012f\3\0\1\u012f\37\0\1\u012f\3\0"+
    "\1\u012f\11\0\1\u012f\2\0\1\u012f\2\0\1\u012f\3\0"+
    "\2\207\114\0\35\212\3\0\6\212\2\0\1\212\1\0"+
    "\2\212\1\0\7\212\2\0\33\212\5\215\2\0\26\215"+
    "\3\0\6\215\2\0\1\215\1\0\2\215\1\0\7\215"+
    "\2\0\33\215\1\216\1\0\1\216\3\0\27\216\3\0"+
    "\6\216\2\0\1\216\1\0\2\216\1\0\7\216\2\0"+
    "\33\216\1\0\1\217\122\0\2\220\115\0\1\u0124\1\0"+
    "\1\u0130\1\u0124\30\0\3\u0131\6\0\2\u0131\1\0\1\u0131"+
    "\2\0\1\u0131\7\0\2\u0131\34\0\4\u0132\151\0\1\u0133"+
    "\15\0\1\u0134\102\0\1\u0135\15\0\1\u0136\74\0\1\u0137"+
    "\167\0\1\u0138\40\0\1\u0139\200\0\1\u013a\120\0\1\u013b"+
    "\31\0\1\u013c\4\0\1\u013d\3\u013c\1\u013e\1\u013c\5\0"+
    "\2\u013c\2\0\2\u013c\21\0\1\u013c\7\0\1\u013f\1\u0140"+
    "\1\u0141\1\u0142\12\u013c\3\0\12\u013c\35\u0143\1\245\15\u0143"+
    "\1\245\45\u0143\35\0\1\u0144\161\0\1\u0145\31\0\1\u0146"+
    "\4\0\6\u0146\5\0\2\u0146\2\0\2\u0146\1\u0147\1\0"+
    "\1\u0147\6\0\1\u0147\2\0\1\u0147\4\0\1\u0146\5\0"+
    "\1\u0147\1\0\16\u0146\3\0\12\u0146\46\0\1\u0148\52\0"+
    "\3\253\1\u0149\1\u014a\55\253\1\0\36\253\30\0\1\u014b"+
    "\166\0\1\u014c\43\0\1\u014d\175\0\1\u014e\41\0\1\u014f"+
    "\56\0\1\u0150\52\0\1\u0151\42\0\1\u0152\61\0\1\u0153"+
    "\40\0\1\u0154\43\0\1\u0155\116\0\1\u0156\11\0\1\267"+
    "\106\0\1\u0157\15\0\1\u0158\104\0\1\u0159\127\0\1\u0156"+
    "\167\0\1\u015a\125\0\1\u015b\16\0\4\u015c\130\0\1\u015d"+
    "\3\0\1\u015e\14\0\1\u015f\1\u0160\1\u015f\3\0\1\u0161"+
    "\2\0\1\u015f\2\0\1\u015f\12\0\1\u015f\1\0\1\u0162"+
    "\1\u0163\1\u0164\1\u0165\72\0\1\361\2\0\1\u0166\131\0"+
    "\1\376\42\0\1\303\2\0\1\303\115\0\1\303\162\0"+
    "\1\304\67\0\1\u0167\7\0\1\u0168\1\u0169\1\u016a\117\0"+
    "\1\u016b\1\u016c\104\0\4\u016d\6\0\5\u016d\2\0\1\u016e"+
    "\6\0\1\u016e\70\0\4\u016f\6\0\5\u016f\101\0\5\u0170"+
    "\1\0\1\u0170\1\0\1\u0170\2\0\7\u0170\3\0\1\u0170"+
    "\37\0\1\u0170\3\0\1\u0170\11\0\1\u0170\2\0\1\u0170"+
    "\2\0\1\u0170\11\0\3\u0171\1\0\1\u0171\5\0\4\u0171"+
    "\104\0\2\u0172\1\0\1\u0172\112\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\3\54\1\u0173\2\54\1\u0174\1\54\1\u0175"+
    "\1\u0176\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\5\54\1\u0177\10\54"+
    "\3\0\12\54\7\0\20\54\1\u0178\1\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\11\54"+
    "\1\u0179\4\54\3\0\12\54\7\0\21\54\1\u017a\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\6\54\1\u017b\13\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\4\54\1\u017c\1\54\1\u017d\7\54\3\0\12\54"+
    "\7\0\11\54\1\u017e\10\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u017f"+
    "\1\54\1\u0180\6\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\2\54\1\u0181\13\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\10\54\1\u0182\5\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u0183\6\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\5\54\1\u0184\10\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\4\54\1\u0185\11\54"+
    "\3\0\12\54\7\0\12\54\1\u0186\7\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\4\54\1\u0187\5\54\1\u0188\3\54\3\0\12\54\32\0"+
    "\1\u0189\75\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\2\54\1\u018a\13\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\4\54\1\u018b"+
    "\11\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\u018c\1\54\7\0\13\54"+
    "\1\u018d\2\54\3\0\12\54\7\0\11\54\1\u018e\10\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\10\54\1\u018f\5\54\3\0\12\54\43\0\1\u0190"+
    "\11\0\1\u0191\106\0\1\u0192\120\0\1\u0193\120\0\1\u0194"+
    "\124\0\1\u0195\102\0\1\u0196\11\0\1\u0197\120\0\1\u0198"+
    "\120\0\1\u0199\3\0\1\u019a\114\0\1\u019b\116\0\1\u019c"+
    "\1\0\1\u019d\120\0\1\u019e\120\0\1\u019f\64\0\22\377"+
    "\2\0\2\377\21\0\1\377\7\0\16\377\3\0\12\377"+
    "\7\0\1\377\4\u0100\6\377\5\u0100\2\377\2\0\2\377"+
    "\20\0\1\u01a0\1\377\7\0\16\377\3\0\12\377\7\0"+
    "\22\u0102\2\0\2\u0102\21\0\1\u0102\7\0\16\u0102\3\0"+
    "\12\u0102\7\0\1\u01a1\4\0\6\u01a1\5\0\2\u01a1\2\0"+
    "\2\u01a1\21\0\1\u01a1\7\0\16\u01a1\3\0\12\u01a1\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\1\u01a2\3\54\1\u01a3\1\u01a4\10\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u01a5"+
    "\10\54\3\0\12\54\7\0\11\54\1\u01a6\7\54\1\u01a7"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\1\54\1\u01a8\10\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\2\54\1\u01a9\7\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u01aa\6\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\2\54\1\u01ab\13\54\3\0"+
    "\12\54\7\0\12\54\1\u01ac\7\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\2\54\1\u01ad\7\54\7\0\21\54\1\u01ae\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\4\54"+
    "\1\u01af\11\54\3\0\12\54\7\0\22\54\2\0\1\54"+
    "\1\u01b0\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\10\54\1\u01b1\11\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\7\54\1\u01b2\6\54\3\0\12\54\7\0\5\54"+
    "\1\u01b3\14\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\20\54\1\u01b4\1\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\12\54\1\u01b5\3\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\6\54\1\u01b6\7\54"+
    "\3\0\12\54\7\0\21\54\1\u01b7\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\11\54\1\u01b8\10\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\7\54\1\u01b9\1\54\1\u01ba"+
    "\10\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\3\u011b\2\0"+
    "\55\u011b\1\u01bb\36\u011b\7\0\5\u01bc\3\0\1\u01bc\2\0"+
    "\7\u01bc\3\0\1\u01bc\1\u01bd\36\0\1\u01bc\3\0\1\u01bc"+
    "\11\0\1\u01bc\2\0\1\u01bc\2\0\1\u01bc\43\0\1\156"+
    "\11\0\1\156\106\0\1\156\124\0\1\156\62\0\3\u01be"+
    "\7\0\4\u01be\101\0\5\u01bf\3\0\1\u01bf\2\0\7\u01bf"+
    "\3\0\1\u01bf\37\0\1\u01bf\3\0\1\u01bf\11\0\1\u01bf"+
    "\2\0\1\u01bf\2\0\1\u01bf\7\0\5\u01c0\3\0\1\u01c0"+
    "\2\0\7\u01c0\3\0\1\u01c0\1\u01c1\36\0\1\u01c0\3\0"+
    "\1\u01c0\11\0\1\u01c0\2\0\1\u01c0\2\0\1\u01c0\1\0"+
    "\1\u012b\2\0\1\u012b\115\0\1\u012b\120\0\1\u012e\2\0"+
    "\1\u012e\115\0\1\u012e\126\0\5\u01c2\3\0\1\u01c2\2\0"+
    "\7\u01c2\3\0\1\u01c2\37\0\1\u01c2\3\0\1\u01c2\11\0"+
    "\1\u01c2\2\0\1\u01c2\2\0\1\u01c2\4\0\1\u0124\167\0"+
    "\1\u01c3\142\0\1\u01c4\113\0\1\u0137\130\0\1\u01c5\120\0"+
    "\1\u01c6\27\0\22\u013c\2\0\2\u013c\21\0\1\u013c\7\0"+
    "\16\u013c\3\0\12\u013c\7\0\22\u013c\2\0\2\u013c\1\u01c7"+
    "\1\0\1\u01c7\6\0\1\u01c7\2\0\1\u01c7\4\0\1\u013c"+
    "\5\0\1\u01c7\1\0\16\u013c\3\0\12\u013c\7\0\22\u013c"+
    "\2\0\2\u013c\1\u01c8\1\0\1\u01c8\6\0\1\u01c8\2\0"+
    "\1\u01c8\4\0\1\u013c\5\0\1\u01c8\1\0\16\u013c\3\0"+
    "\12\u013c\7\0\22\u013c\2\0\2\u013c\1\u01c9\1\0\1\u01c9"+
    "\6\0\1\u01c9\2\0\1\u01c9\4\0\1\u013c\5\0\1\u01c9"+
    "\1\0\16\u013c\3\0\12\u013c\7\0\22\u013c\2\0\2\u013c"+
    "\1\u01ca\1\0\1\u01ca\6\0\1\u01ca\2\0\1\u01ca\4\0"+
    "\1\u013c\5\0\1\u01ca\1\0\16\u013c\3\0\12\u013c\7\0"+
    "\22\u013c\2\0\2\u013c\1\u01cb\1\0\1\u01cb\6\0\1\u01cb"+
    "\2\0\1\u01cb\4\0\1\u013c\5\0\1\u01cb\1\0\16\u013c"+
    "\3\0\12\u013c\7\0\22\u013c\2\0\2\u013c\1\u01cc\1\0"+
    "\1\u01cc\6\0\1\u01cc\2\0\1\u01cc\4\0\1\u013c\5\0"+
    "\1\u01cc\1\0\16\u013c\3\0\12\u013c\100\0\1\u01cd\51\0"+
    "\1\u01ce\73\0\1\u014a\213\0\1\u01cf\41\0\1\u01d0\176\0"+
    "\1\u0156\43\0\1\u01d1\171\0\1\u01d2\124\0\1\u01d3\117\0"+
    "\1\u01d4\113\0\1\u01d5\122\0\1\u01d6\62\0\1\u01d7\103\0"+
    "\1\u0156\101\0\7\u01d8\2\0\2\u01d8\7\0\5\u01d8\2\0"+
    "\2\u01d8\2\0\10\u01d8\1\0\7\u01d8\3\0\6\u01d8\16\0"+
    "\3\u01d8\112\0\1\u01d9\114\0\1\u01da\54\0\1\u01db\163\0"+
    "\1\u01dc\1\0\1\u01dd\43\0\1\u01de\135\0\1\u01df\1\0"+
    "\1\u01df\6\0\1\u01df\2\0\1\u01df\12\0\1\u01df\71\0"+
    "\1\u01e0\1\0\1\u01e0\6\0\1\u01e0\2\0\1\u01e0\12\0"+
    "\1\u01e0\71\0\1\u01e1\1\0\1\u01e1\6\0\1\u01e1\2\0"+
    "\1\u01e1\12\0\1\u01e1\71\0\1\u015f\1\0\1\u015f\6\0"+
    "\1\u015f\2\0\1\u015f\12\0\1\u015f\71\0\1\u01e2\1\0"+
    "\1\u01e2\6\0\1\u01e2\2\0\1\u01e2\12\0\1\u01e2\71\0"+
    "\1\u01e3\1\0\1\u01e3\6\0\1\u01e3\2\0\1\u01e3\12\0"+
    "\1\u01e3\77\0\1\u0197\100\0\1\u0168\1\0\1\u01e4\121\0"+
    "\1\u0168\117\0\1\u0168\121\0\1\u01e5\117\0\1\u01e5\103\0"+
    "\4\u016d\1\0\1\u016d\4\0\5\u016d\1\307\101\0\4\u016d"+
    "\6\0\5\u016d\102\0\4\u016f\1\0\1\u016f\4\0\5\u016f"+
    "\1\307\1\310\77\0\5\u0170\1\0\1\u0170\1\0\1\u0170"+
    "\2\306\7\u0170\3\0\1\u0170\37\0\1\u0170\3\0\1\u0170"+
    "\11\0\1\u0170\2\0\1\u0170\2\0\1\u0170\11\0\3\u0171"+
    "\1\0\1\u0171\2\0\2\306\1\0\4\u0171\104\0\2\u0172"+
    "\1\0\1\u0172\2\0\2\306\106\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\4\54\1\u01e6\5\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\7\54\1\u01e7\2\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\4\54\1\u01e8\5\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\4\54\1\u01e9\5\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\4\54\1\u01ea\11\54\3\0"+
    "\12\54\7\0\11\54\1\u01eb\10\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\1\54\1\u01ec\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\1\54\1\u01ed\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u01ee"+
    "\10\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\7\54"+
    "\1\u01ef\6\54\3\0\12\54\7\0\7\54\1\u01f0\12\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\10\54\1\u01f1\5\54\3\0\12\54\7\0"+
    "\11\54\1\u01f2\10\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\21\54\1\u01f3\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\1\54\1\u01f4\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\4\54\1\u01f5\11\54\3\0"+
    "\12\54\7\0\21\54\1\u01f6\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\11\54\1\u01f7\7\54\1\u01f8\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\13\54"+
    "\1\u01f9\2\54\3\0\12\54\7\0\12\54\1\u01fa\7\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\10\54\1\u01fb"+
    "\11\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\5\54\1\u01fc\10\54\3\0\12\54\7\0"+
    "\22\54\2\0\1\54\1\u01fd\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\7\54\1\u01fe\12\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\u01a1\2\0\2\u01a1\21\0\1\u01a1\7\0\16\u01a1"+
    "\3\0\12\u01a1\7\0\12\54\1\u01ff\7\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\6\54"+
    "\1\u0200\7\54\3\0\2\54\1\u0201\7\54\7\0\12\54"+
    "\1\u0202\7\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\15\54\1\u0203\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u0204\6\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\10\54\1\u0205\5\54\3\0"+
    "\12\54\7\0\21\54\1\u0206\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\21\54\1\u0207\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\20\54\1\u0208\1\u0209\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\12\54\1\u020a\7\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\21\54\1\u020b\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\21\54\1\u020c\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\10\54"+
    "\1\u020d\5\54\3\0\12\54\7\0\21\54\1\u020e\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\4\54\1\u020f\11\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\u0210\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\5\54\1\u0211\10\54\3\0\12\54\7\0\12\54\1\u0212"+
    "\7\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\2\54\1\u0213\13\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u0214\6\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\10\54\1\u0215\5\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\5\54\1\u0216\10\54"+
    "\3\0\12\54\7\0\22\54\2\0\1\u0217\1\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\5\u0218\3\0\1\u0218\2\0\7\u0218"+
    "\3\0\1\u0218\37\0\1\u0218\3\0\1\u0218\11\0\1\u0218"+
    "\2\0\1\u0218\2\0\1\u0218\11\0\3\u0219\7\0\4\u0219"+
    "\101\0\5\u021a\3\0\1\u021a\2\0\7\u021a\3\0\1\u021a"+
    "\37\0\1\u021a\3\0\1\u021a\11\0\1\u021a\2\0\1\u021a"+
    "\2\0\1\u021a\7\0\5\u021b\3\0\1\u021b\2\0\7\u021b"+
    "\3\0\1\u021b\37\0\1\u021b\3\0\1\u021b\11\0\1\u021b"+
    "\2\0\1\u021b\2\0\1\u021b\7\0\5\u021c\3\0\1\u021c"+
    "\2\0\7\u021c\3\0\1\u021c\37\0\1\u021c\3\0\1\u021c"+
    "\11\0\1\u021c\2\0\1\u021c\2\0\1\u021c\1\0\4\u01c3"+
    "\144\0\1\u021d\77\0\22\u021e\2\0\2\u021e\21\0\1\u021e"+
    "\3\0\1\u021f\3\0\16\u021e\3\0\12\u021e\20\0\1\u014d"+
    "\116\0\1\u014d\203\0\1\u0156\112\0\1\u0220\43\0\1\u0221"+
    "\132\0\1\u0222\111\0\1\u0222\127\0\1\u0156\162\0\1\u0223"+
    "\47\0\1\u01de\167\0\1\u0224\125\0\1\u0225\43\0\1\u0226"+
    "\130\0\1\u01d7\165\0\1\u01d6\45\0\1\u0168\105\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\5\54\1\u0227\4\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\3\54\1\u0228\6\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\7\54\1\u0229"+
    "\2\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\10\54"+
    "\1\u022a\1\54\7\0\21\54\1\u022b\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\10\54\1\u022c"+
    "\5\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\1\u022d\11\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\u022e\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\1\54\1\u022f\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\12\54\1\u0230\7\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\10\54"+
    "\1\u0231\5\54\3\0\12\54\7\0\11\54\1\u0232\10\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\7\54\1\u0233\6\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\4\54\1\u0234\11\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u0235\6\54\3\0\12\54"+
    "\7\0\21\54\1\u0236\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\10\54\1\u0237\5\54\3\0"+
    "\12\54\7\0\20\54\1\u0238\1\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\2\54\1\u0239"+
    "\13\54\3\0\12\54\7\0\22\54\2\0\1\54\1\u023a"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\2\54"+
    "\1\u023b\13\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\4\54\1\u023c\11\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\5\54\1\u023d\10\54\3\0\12\54\7\0\11\54"+
    "\1\u023e\10\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\12\54\1\u023f\7\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\7\54\1\u0240\12\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\2\54\1\u0241\13\54"+
    "\3\0\12\54\7\0\21\54\1\u0242\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\7\54\1\u0243\12\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\2\54"+
    "\1\u0244\13\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\u0245\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\6\54"+
    "\1\u0246\7\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\6\54\1\u0247\7\54\3\0\12\54\7\0\7\54\1\u0248"+
    "\12\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\4\54\1\u0249\11\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\7\54\1\u024a\6\54\3\0\12\54"+
    "\7\0\7\54\1\u024b\12\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\12\54\1\u024c\3\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u024d"+
    "\10\54\3\0\12\54\7\0\21\54\1\u024e\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\1\54\1\u024f"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\5\u0250\3\0\1\u0250\2\0"+
    "\7\u0250\3\0\1\u0250\37\0\1\u0250\3\0\1\u0250\11\0"+
    "\1\u0250\2\0\1\u0250\2\0\1\u0250\11\0\3\u0251\7\0"+
    "\4\u0251\101\0\5\u0252\3\0\1\u0252\2\0\7\u0252\3\0"+
    "\1\u0252\37\0\1\u0252\3\0\1\u0252\11\0\1\u0252\2\0"+
    "\1\u0252\2\0\1\u0252\7\0\5\u0253\3\0\1\u0253\2\0"+
    "\7\u0253\3\0\1\u0253\37\0\1\u0253\3\0\1\u0253\11\0"+
    "\1\u0253\2\0\1\u0253\2\0\1\u0253\72\0\1\u0254\35\0"+
    "\22\u021e\2\0\2\u021e\21\0\1\u021e\7\0\16\u021e\3\0"+
    "\12\u021e\7\0\22\u0255\2\0\2\u0255\21\0\1\u0255\7\0"+
    "\16\u0255\3\0\12\u0255\70\0\1\u0256\123\0\1\u0257\121\0"+
    "\1\u0258\116\0\1\u0156\44\0\1\u0156\202\0\1\u0156\115\0"+
    "\1\u0156\32\0\6\54\1\u0259\13\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\6\54\1\u025a\13\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\6\54\1\u025b\3\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\6\54\1\u025c\3\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\5\54\1\u025d\10\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\10\54\1\u025e\5\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\12\54\1\u025f\3\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\5\54\1\u0260\10\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\4\54\1\u0261\11\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\7\54\1\u0262"+
    "\6\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\12\54"+
    "\1\u0263\3\54\3\0\12\54\7\0\21\54\1\u0264\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\5\54\1\u0265\10\54\3\0\12\54\7\0\22\54\2\0"+
    "\1\54\1\u0266\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\1\54\1\u0267\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\2\54\1\u0268\13\54\3\0\12\54\7\0\21\54"+
    "\1\u0269\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\10\54\1\u026a\5\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\10\54\1\u026b\5\54\3\0\12\54"+
    "\7\0\20\54\1\u026c\1\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\5\54\1\u026d\10\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\5\54\1\u026e"+
    "\10\54\3\0\12\54\7\0\20\54\1\u026f\1\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\21\54\1\u0270\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\21\54\1\u0271\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\6\54\1\u0272\7\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\5\54\1\u0273\10\54\3\0\12\54\7\0\5\u0274"+
    "\3\0\1\u0274\2\0\7\u0274\3\0\1\u0274\37\0\1\u0274"+
    "\3\0\1\u0274\11\0\1\u0274\2\0\1\u0274\2\0\1\u0274"+
    "\7\0\5\u0275\3\0\1\u0275\2\0\7\u0275\3\0\1\u0275"+
    "\37\0\1\u0275\3\0\1\u0275\11\0\1\u0275\2\0\1\u0275"+
    "\2\0\1\u0275\7\0\5\u0276\3\0\1\u0276\2\0\7\u0276"+
    "\3\0\1\u0276\37\0\1\u0276\3\0\1\u0276\11\0\1\u0276"+
    "\2\0\1\u0276\2\0\1\u0276\72\0\1\u0137\26\0\3\u0255"+
    "\2\0\55\u0255\1\u0277\36\u0255\34\0\1\u0278\120\0\1\u0279"+
    "\157\0\1\u0156\34\0\6\54\1\u027a\13\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\10\54\1\u027b\1\54\7\0\6\54\1\u027c\13\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\6\54\1\u027d"+
    "\13\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\7\54"+
    "\1\u027e\12\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\6\54\1\u027f\7\54\3\0\12\54"+
    "\7\0\21\54\1\u0280\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\11\54\1\u0281\10\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\11\54\1\u0282\10\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\6\54\1\u0283"+
    "\7\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\5\54"+
    "\1\u0284\10\54\3\0\12\54\7\0\21\54\1\u0285\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\12\54\1\u0286\3\54\3\0\12\54\7\0\22\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\2\54\1\u0287\13\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\5\54\1\u0288\10\54\3\0\12\54\7\0"+
    "\21\54\1\u0289\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\74\0"+
    "\1\u028a\117\0\1\u014c\34\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\4\54\1\u028b\5\54\7\0\6\54\1\u028c\13\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\6\54\1\u028d"+
    "\13\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\20\54"+
    "\1\u028e\1\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\21\54\1\u028f\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\22\54\2\0\1\54\1\u0290\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\13\54\1\u0291\2\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\5\54\1\u0292\10\54\3\0"+
    "\12\54\7\0\11\54\1\u0293\10\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\4\54\1\u0294"+
    "\11\54\3\0\12\54\7\0\7\54\1\u0295\12\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\21\54\1\u0296\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\73\0\1\u0297\34\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\7\54\1\u0298\2\54\7\0"+
    "\6\54\1\u0299\13\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\7\54\1\u029a\6\54\3\0"+
    "\12\54\7\0\7\54\1\u029b\12\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\6\54\1\u029c\13\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54\7\0\20\54\1\u029d\1\54\2\0"+
    "\2\54\6\0\1\304\1\0\1\305\7\0\1\305\1\54"+
    "\7\0\16\54\3\0\12\54\7\0\22\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\12\54\1\u029e\3\54\3\0\12\54\1\0\1\u029f\126\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\6\54\1\u02a0\3\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\4\54\1\u02a1\11\54\3\0"+
    "\12\54\7\0\11\54\1\u02a2\10\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\22\54\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\10\54\1\u02a3"+
    "\5\54\3\0\12\54\7\0\22\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\5\54"+
    "\1\u02a4\10\54\3\0\12\54\1\0\1\u029f\70\0\1\u02a5"+
    "\1\0\1\u02a6\3\0\1\u02a7\27\0\6\54\1\u02a8\13\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\12\54\7\0\11\54\1\u02a9"+
    "\10\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\12\54\7\0\22\54"+
    "\2\0\2\54\6\0\1\304\1\0\1\305\7\0\1\305"+
    "\1\54\7\0\16\54\3\0\1\54\1\u02aa\10\54\7\0"+
    "\7\54\1\u02ab\12\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\73\0\1\u0152\122\0\1\u0154\53\0\1\u02ac\77\0\6\54"+
    "\1\u02ad\13\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\305\1\54\7\0\16\54\3\0\12\54\7\0"+
    "\22\54\2\0\2\54\6\0\1\304\1\0\1\305\7\0"+
    "\1\305\1\54\7\0\16\54\3\0\1\54\1\u02ae\10\54"+
    "\7\0\21\54\1\u02af\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\16\54\3\0\12\54"+
    "\7\0\22\54\2\0\2\54\6\0\1\304\1\0\1\305"+
    "\7\0\1\u02b0\1\54\7\0\16\54\3\0\12\54\27\0"+
    "\1\u02b1\100\0\21\54\1\u02b2\2\0\2\54\6\0\1\304"+
    "\1\0\1\305\7\0\1\305\1\54\7\0\16\54\3\0"+
    "\12\54\7\0\22\54\2\0\2\54\6\0\1\304\1\0"+
    "\1\305\7\0\1\305\1\54\7\0\12\54\1\u02b3\3\54"+
    "\3\0\12\54\7\u02b4\2\0\2\u02b4\7\0\5\u02b4\2\0"+
    "\2\u02b4\2\0\10\u02b4\1\0\7\u02b4\3\0\6\u02b4\16\0"+
    "\3\u02b4\21\0\7\54\1\u02b5\12\54\2\0\2\54\6\0"+
    "\1\304\1\0\1\305\7\0\1\305\1\54\7\0\16\54"+
    "\3\0\12\54\7\0\20\54\1\u02b6\1\54\2\0\2\54"+
    "\6\0\1\304\1\0\1\305\7\0\1\305\1\54\7\0"+
    "\16\54\3\0\12\54";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\2\1\6\0\2\1\5\0\13\1"+
    "\1\0\3\1\1\11\4\0\1\11\23\1\1\11\5\1"+
    "\1\11\6\1\3\11\3\1\4\11\12\1\3\11\2\1"+
    "\1\0\1\1\1\11\3\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\2\1\1\0\4\1\1\11"+
    "\3\1\1\11\3\1\1\11\1\1\1\11\4\1\1\11"+
    "\2\1\1\11\1\1\2\11\5\1\1\0\1\1\1\0"+
    "\1\1\4\0\4\11\2\0\2\11\2\1\1\0\3\11"+
    "\1\1\1\11\2\1\16\0\2\11\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\1\1\7\0\17\1\2\11\6\1"+
    "\2\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\4\11\2\1\1\11\4\1\1\11\1\1\1\11\1\1"+
    "\3\11\2\1\1\11\1\1\1\11\1\0\26\1\1\0"+
    "\3\11\1\1\1\11\3\1\1\11\2\1\1\11\4\1"+
    "\1\11\4\1\2\11\1\1\4\11\4\0\7\1\2\11"+
    "\1\0\2\11\2\0\1\11\21\0\1\11\2\0\3\11"+
    "\4\0\1\1\1\0\1\11\4\0\1\1\1\0\32\1"+
    "\1\11\6\1\21\11\32\1\1\11\1\1\1\11\3\1"+
    "\1\11\2\1\1\0\11\11\12\0\1\11\6\0\5\11"+
    "\1\0\1\11\64\1\1\11\2\1\1\0\1\1\10\0"+
    "\52\1\1\11\2\1\5\0\33\1\4\11\2\0\20\1"+
    "\1\0\14\1\1\0\7\1\1\0\5\1\3\0\4\1"+
    "\1\0\4\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static enum BlockKind {
      PAREN, BRACKET, BRACE, ANGLE, PIPE
  }

  private static class Block {
    @NotNull
    private final BlockKind kind;
    private int balance = 1;
    @NotNull
    private final IElementType endType;

    private Block(@NotNull BlockKind kind, @NotNull IElementType endType) {
      this.kind = kind;
      this.endType = endType;
    }
  }

  private final LexerState lexerState = new LexerState();

  private final IntStack states = new IntArrayList();
  private final Deque<Block> blocks = new ArrayDeque<>();

  private final Deque<String> heredocIds = new ArrayDeque<>();
  private int blockLength;

  private int zzStartReadOld = -1;
  private int zzMarkedPosOld = -1;
  private int zzLexicalStateOld = YYINITIAL;

  private int macroCurlyCount = 0;
  private final Deque<DelimiterState> delimiterStates = new ArrayDeque<>();
  private MacroState macroState;

  public _CrystalLexer13() {
    this((java.io.Reader)null);
  }

  @Override
  public LexerState getLexerState() {
    return lexerState;
  }

  @Override
  public void enterLookAhead() {
    if (zzStartReadOld != -1) throw new AssertionError("Already in look-ahead mode");
    zzStartReadOld = zzStartRead;
    zzMarkedPosOld = zzMarkedPos;
    zzLexicalStateOld = zzLexicalState;
    yybegin(LOOKAHEAD);
  }

  @Override
  public void leaveLookAhead() {
    yybegin(zzLexicalStateOld);
    boolean nonEmpty = zzMarkedPos != zzMarkedPosOld;
    zzMarkedPos = zzMarkedPosOld;
    zzStartRead = zzStartReadOld;
    zzStartReadOld = -1;
    if (nonEmpty) zzAtEOF = false;
  }

  @Nullable
  @Override
  public IElementType lookAhead() throws java.io.IOException {
    enterLookAhead();
    IElementType tokenType = advance();
    leaveLookAhead();
    return tokenType;
  }

  @Override
  public void enterMacro(@NotNull MacroState macroState, boolean skipWhitespace) {
    this.macroState = macroState.copy();
    yypushbegin(skipWhitespace ? MACRO_SKIP_WHITESPACES : MACRO_START);
  }

  @Override
  public void enterMacro(@NotNull MacroState macroState) {
    this.macroState = macroState.copy();
    yypushbegin(MACRO_WHITESPACE_ESCAPE);
  }

  @NotNull
  @Override
  public MacroState getCurrentMacroState() {
      return macroState.copy();
  }

  private boolean eof() {
      return zzMarkedPos == zzBuffer.length();
  }

  @NotNull
  private IElementType handle(@NotNull IElementType type) {
    if (yystate() != LOOKAHEAD) {
      boolean resetRegexFlags =
        type != CR_WHITESPACE &&
        type != CR_NEWLINE &&
        type != CR_LINE_CONTINUATION &&
        type != CR_SEMICOLON;
      if (resetRegexFlags) {
        lexerState.wantsRegex = true;
        lexerState.slashIsRegex = false;
      }
    }

    return type;
  }

  private char yylastchar() {
      return yycharat(yylength() - 1);
  }

  private void yypushbackAll() {
    yypushback(yylength());
  }

  private void yypushbackAndBegin(int state) {
    yypushbackAll();
    yybegin(state);
  }

  private void yypushbegin(int state) {
    states.push(yystate());
    yybegin(state);
  }

  private void yypop() {
    int newState = states.isEmpty() ? YYINITIAL : states.popInt();
    if (newState == PERCENT) newState = YYINITIAL;
    yybegin(newState);
  }

  @NotNull
  private IElementType popAndHandle(@NotNull IElementType type) {
      yypop();
      return handle(type);
  }

  @NotNull
  private IElementType pushAndHandle(int nextState, @NotNull IElementType currentType) {
    yypushbegin(nextState);
    return handle(currentType);
  }

  @NotNull
  private IElementType beginAndHandle(int nextState, @NotNull IElementType currentType) {
    yybegin(nextState);
    return handle(currentType);
  }

  @NotNull
  private IElementType startRegex() {
    return pushAndHandle(REGEX_LITERAL_BODY, CR_REGEX_START);
  }

  private char closingChar(char openChar) {
    switch (openChar) {
      case '(': return ')';
      case '[': return ']';
      case '{': return '}';
      case '<': return '>';
      default: return openChar;
    }
  }

  @Nullable
  private BlockKind blockKindByStartChar(char ch) {
    switch (ch) {
      case '(': return BlockKind.PAREN;
      case '[': return BlockKind.BRACKET;
      case '{': return BlockKind.BRACE;
      case '<': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @Nullable
  private BlockKind blockKindByEndChar(char ch) {
    switch (ch) {
      case ')': return BlockKind.PAREN;
      case ']': return BlockKind.BRACKET;
      case '}': return BlockKind.BRACE;
      case '>': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @Nullable
  private BlockKind blockKindByStartEndChar(char ch) {
    switch (ch) {
      case '(':
      case ')': return BlockKind.PAREN;
      case '[':
      case ']': return BlockKind.BRACKET;
      case '{':
      case '}': return BlockKind.BRACE;
      case '<':
      case '>': return BlockKind.ANGLE;
      case '|': return BlockKind.PIPE;
      default: return null;
    }
  }

  @NotNull
  private IElementType enterBlock(int blockState, @NotNull IElementType startType, @NotNull IElementType endType) {
    char ch = yylastchar();
    BlockKind kind = blockKindByStartChar(ch);
    if (kind != null) {
      blocks.push(new Block(kind, endType));
      yypushbegin(blockState);
    }
    blockLength = 0;
    return handle(startType);
  }

  @NotNull
  private IElementType exitBlock() {
    yypop();
    Block block = blocks.pop();
    return handle(block.endType);
  }

  private void incBlock() {
    char ch = yylastchar();
    BlockKind kind = blockKindByStartChar(ch);
    Block block = blocks.peek();
    if (block != null && block.kind == kind) block.balance++;
  }

  private void decBlock() {
    char ch = yylastchar();
    BlockKind kind = blockKindByEndChar(ch);
    Block block = blocks.peek();
    if (block != null && block.kind == kind) block.balance--;
  }

  private boolean isInBlockOf(@NotNull BlockKind kind) {
    Block block = blocks.peek();
    return block != null && block.kind == kind;
  }

  private boolean isBlockFinished() {
    Block block = blocks.peek();
    return block != null && block.balance == 0;
  }

  private void extendBlock() {
    blockLength += yylength();
  }

  @NotNull
  private IElementType closeBlockToken(@NotNull IElementType type) {
    zzStartRead = zzMarkedPos - blockLength;
    blockLength = 0;
    return handle(type);
  }

  @NotNull
  private IElementType closePrecedingBlockToken(@NotNull IElementType type) {
    yypushbackAll();
    return closeBlockToken(type);
  }

  @Nullable
  private IElementType closePrecedingBlockToken(int nextState, @NotNull IElementType type) {
    yypushbackAndBegin(nextState);

    if (blockLength == 0) return null;
    zzStartRead = zzMarkedPos - blockLength;
    blockLength = 0;
    return handle(type);
  }

  @NotNull
  private IElementType closePrecedingBlockOrHandle(@NotNull IElementType blockTokenType, @NotNull IElementType currentType) {
    return blockLength != 0 ? closePrecedingBlockToken(blockTokenType) : handle(currentType);
  }

  private boolean isFullHeredoc() {
      return !StringUtil.startsWithChar(heredocIds.peekFirst(), '\'');
  }

  @NotNull
  private IElementType consumeHeredocStartId() {
    CharSequence text = yytext();
    heredocIds.offer(text.toString());
    yybegin(HEREDOC_HEADER);
    return handle(CR_HEREDOC_START_ID);
  }

  private void startHeredocBody() {
    blockLength = 0;
    yybegin(HEREDOC_BODY);
  }

  @Nullable
  private IElementType consumeHeredocPortion(boolean isEof) {
    CharSequence text = yytext();
    if (StringUtil.equals(StringUtil.trimLeading(text), StringUtil.unquoteString(heredocIds.getFirst()))) {
      heredocIds.pop();
      yypushbackAndBegin(HEREDOC_END_ID);
      zzStartRead = zzMarkedPos - blockLength;
      return handle(CR_HEREDOC_BODY);
    }
    else {
      blockLength += yylength();
      if (isEof) {
        heredocIds.clear();
        zzStartRead = zzMarkedPos - blockLength;
        return handle(CR_HEREDOC_BODY);
      }
      return null;
    }
  }

  @NotNull
  private IElementType consumeHeredocEndId() {
    if (heredocIds.isEmpty()) {
      yypop();
    }
    else {
      yybegin(HEREDOC_HEADER);
    }
    return handle(CR_HEREDOC_END_ID);
  }

  @NotNull
  private IElementType handleSlash() {
    if (lexerState.wantsDefOrMacroName) return handle(CR_DIV_OP);
    if (lexerState.slashIsRegex) return startRegex();
    if (eof() || isAsciiWhitespace(zzBuffer.charAt(zzMarkedPos))) return handle(CR_DIV_OP);
    if (lexerState.wantsRegex) return startRegex();
    return handle(CR_DIV_OP);
  }

  private boolean isAsciiWhitespace(char c) {
    return c == ' ' || (c >= 9 && c <= 13);
  }

  private void processMacroStartKeyword(boolean nesting) {
    if (nesting) macroState.nest++;
    macroState.whitespace = true;
    macroState.beginningOfLine = false;
    yybegin(MACRO_MAIN);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CrystalLexer13(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case MACRO_CONTROL_KEYWORD: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 695: break;
            case MACRO_START_CONTROL_KEYWORD: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 696: break;
            case MACRO_END_CONTROL_KEYWORD: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 697: break;
            case MACRO_CHECK_COMMENT: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 698: break;
            case MACRO_COMMENT: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 699: break;
            case MACRO_NO_DELIMITER: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 700: break;
            case MACRO_END_KEYWORD: {
              return popAndHandle(
    macroState.nest == 0 && macroState.controlNest == 0
      ? CR_END
      : CR_MACRO_FRAGMENT
  );
            }  // fall though
            case 701: break;
            case MACRO_MAIN: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 702: break;
            case MACRO_CHECK_HEREDOC_END: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 703: break;
            case MACRO_CHECK_KEYWORD: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 704: break;
            case MACRO_CHECK_KEYWORD2: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 705: break;
            case MACRO_POSTPROCESS_DELIMITER_STATE: {
              return popAndHandle(CR_MACRO_FRAGMENT);
            }  // fall though
            case 706: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypop();
            } 
            // fall through
          case 263: break;
          case 2: 
            { IElementType type = consumeHeredocPortion(zzInput == YYEOF);
    if (type != null) return type;
            } 
            // fall through
          case 264: break;
          case 3: 
            { return consumeHeredocEndId();
            } 
            // fall through
          case 265: break;
          case 4: 
            { lexerState.slashIsRegex = true;
    yybegin(MACRO_START);
            } 
            // fall through
          case 266: break;
          case 5: 
            { yybegin(MACRO_START);
            } 
            // fall through
          case 267: break;
          case 6: 
            { yybegin(MACRO_CHECK_COMMENT);
            } 
            // fall through
          case 268: break;
          case 7: 
            { return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 269: break;
          case 8: 
            { macroState.nest++;
    return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 270: break;
          case 9: 
            { macroState.nest--;
    return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 271: break;
          case 10: 
            { yybegin(macroState.comment ? MACRO_COMMENT : MACRO_NO_DELIMITER);
            } 
            // fall through
          case 272: break;
          case 11: 
            { yybegin(MACRO_NO_DELIMITER);
            } 
            // fall through
          case 273: break;
          case 12: 
            { yybegin(MACRO_MAIN);
            } 
            // fall through
          case 274: break;
          case 13: 
            { if (macroState.nest == 0 && macroState.controlNest == 0) {
      return popAndHandle(CR_END);
    }
    else {
      macroState.nest--;
      yybegin(MACRO_MAIN);
    }
            } 
            // fall through
          case 275: break;
          case 14: 
            { yybegin(
        macroState.delimiterState == null && macroState.whitespace
          ? MACRO_CHECK_KEYWORD
          : MACRO_POSTPROCESS_DELIMITER_STATE
      );
            } 
            // fall through
          case 276: break;
          case 15: 
            { yybegin(macroState.beginningOfLine ? MACRO_CHECK_KEYWORD2 : MACRO_POSTPROCESS_DELIMITER_STATE);
            } 
            // fall through
          case 277: break;
          case 16: 
            { yybegin(MACRO_POSTPROCESS_DELIMITER_STATE);
            } 
            // fall through
          case 278: break;
          case 17: 
            { DelimiterState delimiterState = macroState.delimiterState;
    if (delimiterState != null) {
        char ch = yycharat(0);
        if (delimiterState.getNestChar() == ch) {
          macroState.delimiterState = delimiterState.withOpenCountDelta(1);
        }
        else if (delimiterState.getEndChar() == ch) {
          macroState.delimiterState = delimiterState.openCount == 1 ? null : delimiterState.withOpenCountDelta(-1);
        }
    }
    yybegin(MACRO_GENERAL_LITERAL);
            } 
            // fall through
          case 279: break;
          case 18: 
            { return handle(CR_BAD_CHARACTER);
            } 
            // fall through
          case 280: break;
          case 19: 
            { return handle(CR_WHITESPACE);
            } 
            // fall through
          case 281: break;
          case 20: 
            { return handle(CR_NEWLINE);
            } 
            // fall through
          case 282: break;
          case 21: 
            { return handle(CR_LINE_COMMENT);
            } 
            // fall through
          case 283: break;
          case 22: 
            { if (yylastchar() == '=') yypushback(1);
    boolean isConst = Character.isUpperCase(yycharat(0));
    char lastChar = yylastchar();
    if (isConst && (lastChar == '?' || lastChar == '!')) yypushback(1);
    return handle(isConst ? CR_CONSTANT : CR_IDENTIFIER);
            } 
            // fall through
          case 284: break;
          case 23: 
            { return handle(CR_INTEGER_LITERAL);
            } 
            // fall through
          case 285: break;
          case 24: 
            { return handle(CR_UNDERSCORE);
            } 
            // fall through
          case 286: break;
          case 25: 
            { return handle(CR_MINUS_OP);
            } 
            // fall through
          case 287: break;
          case 26: 
            { return handle(CR_DOT);
            } 
            // fall through
          case 288: break;
          case 27: 
            { return handle(CR_LBRACE);
            } 
            // fall through
          case 289: break;
          case 28: 
            { return handle(CR_RBRACE);
            } 
            // fall through
          case 290: break;
          case 29: 
            { return handle(CR_LBRACKET);
            } 
            // fall through
          case 291: break;
          case 30: 
            { return handle(CR_PLUS_OP);
            } 
            // fall through
          case 292: break;
          case 31: 
            { return handle(CR_MUL_OP);
            } 
            // fall through
          case 293: break;
          case 32: 
            { return handleSlash();
            } 
            // fall through
          case 294: break;
          case 33: 
            { return handle(CR_ASSIGN_OP);
            } 
            // fall through
          case 295: break;
          case 34: 
            { return handle(CR_COMPLEMENT_OP);
            } 
            // fall through
          case 296: break;
          case 35: 
            { return handle(CR_NOT_OP);
            } 
            // fall through
          case 297: break;
          case 36: 
            { return handle(CR_LESS_OP);
            } 
            // fall through
          case 298: break;
          case 37: 
            { return handle(CR_GREATER_OP);
            } 
            // fall through
          case 299: break;
          case 38: 
            { return handle(CR_AND_OP);
            } 
            // fall through
          case 300: break;
          case 39: 
            { return handle(CR_OR_OP);
            } 
            // fall through
          case 301: break;
          case 40: 
            { return handle(CR_XOR_OP);
            } 
            // fall through
          case 302: break;
          case 41: 
            { if (lexerState.wantsDefOrMacroName) return handle(CR_MOD_OP);
    yypushbackAndBegin(PERCENT);
            } 
            // fall through
          case 303: break;
          case 42: 
            { return handle(CR_RBRACKET);
            } 
            // fall through
          case 304: break;
          case 43: 
            { return handle(CR_QUESTION);
            } 
            // fall through
          case 305: break;
          case 44: 
            { return handle(CR_COLON);
            } 
            // fall through
          case 306: break;
          case 45: 
            { return pushAndHandle(CHAR_LITERAL_BODY, CR_CHAR_START);
            } 
            // fall through
          case 307: break;
          case 46: 
            { return pushAndHandle(STRING_LITERAL_BODY, CR_STRING_START);
            } 
            // fall through
          case 308: break;
          case 47: 
            { return handle(CR_LPAREN);
            } 
            // fall through
          case 309: break;
          case 48: 
            { return handle(CR_RPAREN);
            } 
            // fall through
          case 310: break;
          case 49: 
            { return lexerState.wantsDefOrMacroName ? handle(CR_BACKQUOTE) : pushAndHandle(COMMAND_LITERAL_BODY, CR_COMMAND_START);
            } 
            // fall through
          case 311: break;
          case 50: 
            { return handle(CR_COMMA);
            } 
            // fall through
          case 312: break;
          case 51: 
            { return handle(CR_SEMICOLON);
            } 
            // fall through
          case 313: break;
          case 52: 
            { return consumeHeredocStartId();
            } 
            // fall through
          case 314: break;
          case 53: 
            { startHeredocBody(); return handle(CR_NEWLINE);
            } 
            // fall through
          case 315: break;
          case 54: 
            { return handle(CR_CHAR_RAW);
            } 
            // fall through
          case 316: break;
          case 55: 
            { return handle(CR_BAD_ESCAPE);
            } 
            // fall through
          case 317: break;
          case 56: 
            { yypop(); return handle(CR_CHAR_END);
            } 
            // fall through
          case 318: break;
          case 57: 
            { CharSequence text = yytext();
    char lastChar = zzBuffer.charAt(zzMarkedPos - 1);
    if ((lastChar == '!' || lastChar == '=') && zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '=') {
      yypushback(1);
    }
    yypop();
    return handle(CR_STRING_RAW);
            } 
            // fall through
          case 319: break;
          case 58: 
            { yypop(); return handle(CR_STRING_RAW);
            } 
            // fall through
          case 320: break;
          case 59: 
            { return beginAndHandle(SYMBOL_BODY, CR_STRING_START);
            } 
            // fall through
          case 321: break;
          case 60: 
            { return handle(CR_STRING_RAW);
            } 
            // fall through
          case 322: break;
          case 61: 
            { yypop(); return handle(CR_STRING_END);
            } 
            // fall through
          case 323: break;
          case 62: 
            { extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 324: break;
          case 63: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_BAD_ESCAPE);
            } 
            // fall through
          case 325: break;
          case 64: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_STRING_END);
            } 
            // fall through
          case 326: break;
          case 65: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_COMMAND_END);
            } 
            // fall through
          case 327: break;
          case 66: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);
    yypop();
    return handle(CR_REGEX_END);
            } 
            // fall through
          case 328: break;
          case 67: 
            { return handle(CR_CHAR_CODE);
            } 
            // fall through
          case 329: break;
          case 68: 
            { return popAndHandle(CR_UNICODE_BLOCK_END);
            } 
            // fall through
          case 330: break;
          case 69: 
            { return CR_NEWLINE;
            } 
            // fall through
          case 331: break;
          case 70: 
            { incBlock(); return handle(CR_LBRACE);
            } 
            // fall through
          case 332: break;
          case 71: 
            { decBlock(); return isBlockFinished() ? exitBlock() : handle(CR_RBRACE);
            } 
            // fall through
          case 333: break;
          case 72: 
            { if (!(yystate() == REGEX_BLOCK && zzStartRead > 0 && yycharat(-1) == '\\')) incBlock();
    extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 334: break;
          case 73: 
            { if (!(yystate() == REGEX_BLOCK && zzStartRead > 0 && yycharat(-1) == '\\')) decBlock();
    if (isBlockFinished()) {
      IElementType type = closePrecedingBlockToken(BLOCK_END, CR_STRING_RAW);
      if (type != null) return type;
    }
    else {
      extendBlock();
      if (eof()) return closeBlockToken(CR_STRING_RAW);
    }
            } 
            // fall through
          case 335: break;
          case 74: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_WHITESPACE);
            } 
            // fall through
          case 336: break;
          case 75: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_NEWLINE);
            } 
            // fall through
          case 337: break;
          case 76: 
            { return beginAndHandle(MACRO_START, CR_WHITESPACE);
            } 
            // fall through
          case 338: break;
          case 77: 
            { if (macroCurlyCount > 0) macroCurlyCount++;
    yybegin(MACRO_CHECK_COMMENT);
            } 
            // fall through
          case 339: break;
          case 78: 
            { yypushbackAll();
    return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 340: break;
          case 79: 
            { if (macroState.delimiterState == null) {
      macroState.comment = true;
    }
    else {
      yypushbackAll();
    }
            } 
            // fall through
          case 341: break;
          case 80: 
            { macroState.comment = false;
    macroState.beginningOfLine = true;
    macroState.whitespace = true;
    yybegin(macroState.delimiterState == null ? MACRO_NO_DELIMITER : MACRO_MAIN);
            } 
            // fall through
          case 342: break;
          case 81: 
            { yybegin(macroState.delimiterState == null ? MACRO_NO_DELIMITER : MACRO_MAIN);
            } 
            // fall through
          case 343: break;
          case 82: 
            { yypushbackAll();
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 344: break;
          case 83: 
            { macroState.whitespace = true;
    macroState.beginningOfLine = true;
    Deque<DelimiterState> heredocs = macroState.heredocs;
    if (macroState.delimiterState == null && heredocs != null && !heredocs.isEmpty()) {
      macroState.delimiterState = heredocs.removeFirst();
    }
    if (macroState.delimiterState != null && macroState.delimiterState.kind == DelimiterKind.HEREDOC) {
      yybegin(MACRO_CHECK_HEREDOC_END);
    }
            } 
            // fall through
          case 345: break;
          case 84: 
            { macroState.whitespace = false;
            } 
            // fall through
          case 346: break;
          case 85: 
            { if (macroState.delimiterState == null) {
        yypushbackAll();
        return popAndHandle(CR_MACRO_FRAGMENT);
      }
      macroState.whitespace = false;
            } 
            // fall through
          case 347: break;
          case 86: 
            { yypushbackAll();
      return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 348: break;
          case 87: 
            { if (macroState.delimiterState != null && macroState.delimiterState.getEndChar() == '}') {
      macroState.delimiterState = macroState.delimiterState.withOpenCountDelta(-1);
      if (macroState.delimiterState.openCount == 0) macroState.delimiterState = null;
    }
    else if (macroCurlyCount > 0) {
      macroCurlyCount--;
      if (macroCurlyCount == 0) macroState.delimiterState = delimiterStates.pop();
    }
            } 
            // fall through
          case 349: break;
          case 88: 
            { if (macroState.delimiterState == null && delimiterStates.isEmpty()) {
      yypushbackAndBegin(MACRO_CHECK_HEREDOC_START);
    }
            } 
            // fall through
          case 350: break;
          case 89: 
            { char ch = yycharat(0);
    if (macroState.delimiterState == null) {
      macroState.delimiterState = DelimiterState.create(DelimiterKind.STRING, ch, ch);
    }
    else if (macroState.delimiterState.getEndChar() == ch) {
      macroState.delimiterState = null;
    }
    macroState.whitespace = false;
            } 
            // fall through
          case 351: break;
          case 90: 
            { boolean newLine = yylastchar() == '\n';
      boolean foundEndId = newLine || eof();
      int n = yylength();
      int suffixSize = n > 1 && yycharat(n - 2) == '\r'
        ? 2
        : newLine
          ? 1
          : 0;
      if (foundEndId) {
        int from = 0;
        while (from < n) {
          char ch = yycharat(from);
          if (ch == ' ' || ch == '\t') from++; else break;
        }
        int to = n - suffixSize;
        String currentId = macroState.delimiterState.end;
        foundEndId = CharArrayUtil.regionMatches(yytext(), from, to, currentId, 0, currentId.length());
      }
      if (foundEndId) {
        Deque<DelimiterState> heredocs = macroState.heredocs;
        macroState.delimiterState = heredocs != null && !heredocs.isEmpty() ? heredocs.removeFirst() : null;
        yypushback(suffixSize);
      }
      else {
        yypushbackAll();
      }
      yybegin(MACRO_MAIN);
            } 
            // fall through
          case 352: break;
          case 91: 
            { macroState.whitespace = false;
    macroState.beginningOfLine = false;
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 353: break;
          case 92: 
            { macroState.whitespace = true;
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 354: break;
          case 93: 
            { return exitBlock();
            } 
            // fall through
          case 355: break;
          case 94: 
            { return beginAndHandle(YYINITIAL, CR_MOD_OP);
            } 
            // fall through
          case 356: break;
          case 95: 
            { return handle(CR_MOD_OP);
            } 
            // fall through
          case 357: break;
          case 96: 
            { return handle(CR_LINE_CONTINUATION);
            } 
            // fall through
          case 358: break;
          case 97: 
            { return handle(CR_OF);
            } 
            // fall through
          case 359: break;
          case 98: 
            { return handle(CR_IF);
            } 
            // fall through
          case 360: break;
          case 99: 
            { return handle(CR_IN);
            } 
            // fall through
          case 361: break;
          case 100: 
            { return handle(CR_MINUS_ASSIGN_OP);
            } 
            // fall through
          case 362: break;
          case 101: 
            { return handle(CR_ARROW_OP);
            } 
            // fall through
          case 363: break;
          case 102: 
            { return handle(CR_INCL_RANGE_OP);
            } 
            // fall through
          case 364: break;
          case 103: 
            { return handle(CR_AS);
            } 
            // fall through
          case 365: break;
          case 104: 
            { return handle(CR_MACRO_EXPRESSION_LBRACE);
            } 
            // fall through
          case 366: break;
          case 105: 
            { return handle(CR_MACRO_CONTROL_LBRACE);
            } 
            // fall through
          case 367: break;
          case 106: 
            { return handle(CR_INDEXED_OP);
            } 
            // fall through
          case 368: break;
          case 107: 
            { return handle(CR_PLUS_ASSIGN_OP);
            } 
            // fall through
          case 369: break;
          case 108: 
            { if (lexerState.typeMode) {
      yypushback(1);
      return handle(CR_MUL_OP);
    }
    return handle(CR_EXP_OP);
            } 
            // fall through
          case 370: break;
          case 109: 
            { return handle(CR_MUL_ASSIGN_OP);
            } 
            // fall through
          case 371: break;
          case 110: 
            { if (lexerState.wantsDefOrMacroName || !lexerState.slashIsRegex) return handle(CR_FLOOR_DIV_OP);
    yypushback(1);
    return handleSlash();
            } 
            // fall through
          case 372: break;
          case 111: 
            { if (!lexerState.slashIsRegex) return handle(CR_DIV_ASSIGN_OP);
    yypushback(1);
    return handleSlash();
            } 
            // fall through
          case 373: break;
          case 112: 
            { return handle(CR_EQUAL_OP);
            } 
            // fall through
          case 374: break;
          case 113: 
            { return handle(CR_MATCH_OP);
            } 
            // fall through
          case 375: break;
          case 114: 
            { return handle(CR_BIG_ARROW_OP);
            } 
            // fall through
          case 376: break;
          case 115: 
            { return handle(CR_NON_EQUAL_OP);
            } 
            // fall through
          case 377: break;
          case 116: 
            { return handle(CR_NON_MATCH_OP);
            } 
            // fall through
          case 378: break;
          case 117: 
            { return handle(CR_LESS_EQUAL_OP);
            } 
            // fall through
          case 379: break;
          case 118: 
            { return handle(CR_LSHIFT_OP);
            } 
            // fall through
          case 380: break;
          case 119: 
            { return handle(CR_GREATER_EQUAL_OP);
            } 
            // fall through
          case 381: break;
          case 120: 
            { return handle(CR_RSHIFT_OP);
            } 
            // fall through
          case 382: break;
          case 121: 
            { return handle(CR_WRAP_MINUS_OP);
            } 
            // fall through
          case 383: break;
          case 122: 
            { return handle(CR_WRAP_PLUS_OP);
            } 
            // fall through
          case 384: break;
          case 123: 
            { return handle(CR_WRAP_MUL_OP);
            } 
            // fall through
          case 385: break;
          case 124: 
            { return handle(CR_AND_ASSIGN_OP);
            } 
            // fall through
          case 386: break;
          case 125: 
            { return handle(CR_ANDAND_OP);
            } 
            // fall through
          case 387: break;
          case 126: 
            { return handle(CR_OR_ASSIGN_OP);
            } 
            // fall through
          case 388: break;
          case 127: 
            { return handle(CR_OROR_OP);
            } 
            // fall through
          case 389: break;
          case 128: 
            { return handle(CR_XOR_ASSIGN_OP);
            } 
            // fall through
          case 390: break;
          case 129: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (lexerState.wantsSymbol) {
      yypushbegin(SYMBOL);
      return handle(CR_SYMBOL_START);
    }
    return handle(CR_COLON);
            } 
            // fall through
          case 391: break;
          case 130: 
            { return handle(CR_PATH_OP);
            } 
            // fall through
          case 392: break;
          case 131: 
            { return handle(CR_GLOBAL_VAR);
            } 
            // fall through
          case 393: break;
          case 132: 
            { return handle(CR_GLOBAL_MATCH_DATA_INDEX);
            } 
            // fall through
          case 394: break;
          case 133: 
            { return handle(CR_GLOBAL_MATCH_DATA);
            } 
            // fall through
          case 395: break;
          case 134: 
            { return handle(CR_INSTANCE_VAR);
            } 
            // fall through
          case 396: break;
          case 135: 
            { return handle(CR_ANNO_LBRACKET);
            } 
            // fall through
          case 397: break;
          case 136: 
            { return handle(CR_DO);
            } 
            // fall through
          case 398: break;
          case 137: 
            { if (isFullHeredoc()) {
      return blockLength != 0
        ? closePrecedingBlockToken(CR_HEREDOC_BODY)
        : enterBlock(INTERPOLATION_BLOCK, CR_INTERPOLATION_START, CR_INTERPOLATION_END);
    }
    IElementType type = consumeHeredocPortion(zzInput == YYEOF);
    if (type != null) return type;
            } 
            // fall through
          case 399: break;
          case 138: 
            { return handle(CR_RAW_ESCAPE);
            } 
            // fall through
          case 400: break;
          case 139: 
            { return handle(CR_SPECIAL_ESCAPE);
            } 
            // fall through
          case 401: break;
          case 140: 
            { return handle(CR_UNICODE_ESCAPE);
            } 
            // fall through
          case 402: break;
          case 141: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_RAW_ESCAPE);
            } 
            // fall through
          case 403: break;
          case 142: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_OCTAL_ESCAPE);
            } 
            // fall through
          case 404: break;
          case 143: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_HEX_ESCAPE);
            } 
            // fall through
          case 405: break;
          case 144: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_SPECIAL_ESCAPE);
            } 
            // fall through
          case 406: break;
          case 145: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_UNICODE_ESCAPE);
            } 
            // fall through
          case 407: break;
          case 146: 
            { return blockLength != 0
      ? closePrecedingBlockToken(CR_STRING_RAW)
      : enterBlock(INTERPOLATION_BLOCK, CR_INTERPOLATION_START, CR_INTERPOLATION_END);
            } 
            // fall through
          case 408: break;
          case 147: 
            { return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_LINE_CONTINUATION);
            } 
            // fall through
          case 409: break;
          case 148: 
            { BlockKind kind = blockKindByStartEndChar(yycharat(1));
    if (isInBlockOf(kind)) return closePrecedingBlockOrHandle(CR_STRING_RAW, CR_RAW_ESCAPE);

    yypushback(1);
    extendBlock();
    if (eof()) return closeBlockToken(CR_STRING_RAW);
            } 
            // fall through
          case 410: break;
          case 149: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { lexerState.slashIsRegex = true;
    yybegin(MACRO_SKIP_WHITESPACES);
            } 
            // fall through
          case 411: break;
          case 150: 
            { macroState.beginningOfLine = false;
    return popAndHandle(CR_MACRO_FRAGMENT);
            } 
            // fall through
          case 412: break;
          case 151: 
            { macroState.beginningOfLine = false;
    return popAndHandle(CR_MACRO_EXPRESSION_LBRACE);
            } 
            // fall through
          case 413: break;
          case 152: 
            { macroState.beginningOfLine = false;
    return popAndHandle(CR_MACRO_CONTROL_LBRACE);
            } 
            // fall through
          case 414: break;
          case 153: 
            { yybegin(MACRO_START_CONTROL_KEYWORD);
            } 
            // fall through
          case 415: break;
          case 154: 
            { macroState.beginningOfLine = false;
    return popAndHandle(CR_MACRO_VAR);
            } 
            // fall through
          case 416: break;
          case 155: 
            { macroState.whitespace = false;
    if (macroState.delimiterState != null) {
      char lastChar = yylastchar();
      if (lastChar == '\\' || lastChar == macroState.delimiterState.getEndChar()) break;
    }
    yypushback(1);
            } 
            // fall through
          case 417: break;
          case 156: 
            { if (macroState.delimiterState == null) {
        yypushbackAll();
        return popAndHandle(CR_MACRO_FRAGMENT);
      }
      macroCurlyCount++;
      delimiterStates.push(macroState.delimiterState);
      macroState.delimiterState = null;
      macroState.whitespace = false;
            } 
            // fall through
          case 418: break;
          case 157: 
            { macroState.whitespace = false;
    if (macroState.delimiterState == null) {
      yypushbackAll();
      return popAndHandle(CR_MACRO_FRAGMENT);
    }
    else {
      yypushback(1);
    }
            } 
            // fall through
          case 419: break;
          case 158: 
            { char ch = yylastchar();
    macroState.delimiterState = DelimiterState.create(DelimiterKind.STRING, ch, closingChar(ch), 1);
            } 
            // fall through
          case 420: break;
          case 159: 
            { macroState.whitespace = false;
    macroState.beginningOfLine = true;
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 421: break;
          case 160: 
            { return enterBlock(STRING_BLOCK, CR_STRING_START, CR_STRING_END);
            } 
            // fall through
          case 422: break;
          case 161: 
            { return beginAndHandle(YYINITIAL, CR_MACRO_CONTROL_RBRACE);
            } 
            // fall through
          case 423: break;
          case 162: 
            { return beginAndHandle(YYINITIAL, CR_MOD_ASSIGN_OP);
            } 
            // fall through
          case 424: break;
          case 163: 
            { return handle(CR_FLOAT_LITERAL);
            } 
            // fall through
          case 425: break;
          case 164: 
            { return handle(CR_OUT);
            } 
            // fall through
          case 426: break;
          case 165: 
            { return handle(CR_FOR);
            } 
            // fall through
          case 427: break;
          case 166: 
            { return handle(CR_FUN);
            } 
            // fall through
          case 428: break;
          case 167: 
            { return handle(CR_END);
            } 
            // fall through
          case 429: break;
          case 168: 
            { return handle(CR_EXCL_RANGE_OP);
            } 
            // fall through
          case 430: break;
          case 169: 
            { return handle(CR_AS_QUESTION);
            } 
            // fall through
          case 431: break;
          case 170: 
            { return handle(CR_ASM);
            } 
            // fall through
          case 432: break;
          case 171: 
            { return handle(CR_INDEXED_SET_OP);
            } 
            // fall through
          case 433: break;
          case 172: 
            { return handle(CR_INDEXED_CHECK_OP);
            } 
            // fall through
          case 434: break;
          case 173: 
            { return handle(CR_EXP_ASSIGN_OP);
            } 
            // fall through
          case 435: break;
          case 174: 
            { if (lexerState.wantsDefOrMacroName || !lexerState.slashIsRegex) return handle(CR_FLOOR_DIV_ASSIGN_OP);
    yypushback(2);
    return handleSlash();
            } 
            // fall through
          case 436: break;
          case 175: 
            { return handle(CR_CASE_EQUAL_OP);
            } 
            // fall through
          case 437: break;
          case 176: 
            { return handle(CR_COMPARE_OP);
            } 
            // fall through
          case 438: break;
          case 177: 
            { return pushAndHandle(HEREDOC_START_ID, CR_HEREDOC_START);
            } 
            // fall through
          case 439: break;
          case 178: 
            { return handle(CR_LSHIFT_ASSIGN_OP);
            } 
            // fall through
          case 440: break;
          case 179: 
            { return handle(CR_RSHIFT_ASSIGN_OP);
            } 
            // fall through
          case 441: break;
          case 180: 
            { return handle(CR_WRAP_MINUS_ASSIGN_OP);
            } 
            // fall through
          case 442: break;
          case 181: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypushback(1); return handle(CR_AND_OP);
            } 
            // fall through
          case 443: break;
          case 182: 
            { return handle(CR_WRAP_PLUS_ASSIGN_OP);
            } 
            // fall through
          case 444: break;
          case 183: 
            { return handle(CR_WRAP_EXP_OP);
            } 
            // fall through
          case 445: break;
          case 184: 
            { return handle(CR_WRAP_MUL_ASSIGN_OP);
            } 
            // fall through
          case 446: break;
          case 185: 
            { return handle(CR_ANDAND_ASSIGN_OP);
            } 
            // fall through
          case 447: break;
          case 186: 
            { return handle(CR_OROR_ASSIGN_OP);
            } 
            // fall through
          case 448: break;
          case 187: 
            { return handle(CR_CLASS_VAR);
            } 
            // fall through
          case 449: break;
          case 188: 
            { return handle(CR_LIB);
            } 
            // fall through
          case 450: break;
          case 189: 
            { return handle(CR_NIL);
            } 
            // fall through
          case 451: break;
          case 190: 
            { return handle(CR_DEF);
            } 
            // fall through
          case 452: break;
          case 191: 
            { yypushbegin(CHAR_UNICODE_BLOCK); return handle(CR_UNICODE_BLOCK_START);
            } 
            // fall through
          case 453: break;
          case 192: 
            { if (blockLength != 0) return closePrecedingBlockToken(CR_STRING_RAW);

    yypushbegin(STRING_UNICODE_BLOCK);
    return handle(CR_UNICODE_BLOCK_START);
            } 
            // fall through
          case 454: break;
          case 193: 
            { macroState.beginningOfLine = false;
    yybegin(MACRO_CONTROL_KEYWORD);
            } 
            // fall through
          case 455: break;
          case 194: 
            { yybegin(MACRO_END_CONTROL_KEYWORD);
            } 
            // fall through
          case 456: break;
          case 195: 
            { macroState.beginningOfLine = false;
    yybegin(macroState.whitespace ? MACRO_END_KEYWORD : MACRO_MAIN);
            } 
            // fall through
          case 457: break;
          case 196: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.COMMAND, 'x', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 458: break;
          case 197: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.SYMBOL_ARRAY, 'i', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 459: break;
          case 198: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.STRING, 'q', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 460: break;
          case 199: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.STRING, 'Q', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 461: break;
          case 200: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.REGEX, 'r', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 462: break;
          case 201: 
            { macroState.delimiterState = DelimiterState.create(DelimiterKind.STRING_ARRAY, 'w', closingChar(yylastchar()), 1);
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 463: break;
          case 202: 
            { if (macroState.whitespace && macroState.delimiterState == null) {
        yypushbackAll();
        return popAndHandle(CR_MACRO_FRAGMENT);
      }
      else {
        macroState.whitespace = false;
        macroState.beginningOfLine = false;
      }
            } 
            // fall through
          case 464: break;
          case 203: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { processMacroStartKeyword(true);
            } 
            // fall through
          case 465: break;
          case 204: 
            { return enterBlock(STRING_BLOCK, CR_COMMAND_START, CR_COMMAND_END);
            } 
            // fall through
          case 466: break;
          case 205: 
            { return enterBlock(STRING_ARRAY_BLOCK, CR_SYMBOL_ARRAY_START, CR_SYMBOL_ARRAY_END);
            } 
            // fall through
          case 467: break;
          case 206: 
            { return enterBlock(SIMPLE_STRING_BLOCK, CR_STRING_START, CR_STRING_END);
            } 
            // fall through
          case 468: break;
          case 207: 
            { return enterBlock(REGEX_BLOCK, CR_REGEX_START, CR_REGEX_END);
            } 
            // fall through
          case 469: break;
          case 208: 
            { return enterBlock(STRING_ARRAY_BLOCK, CR_STRING_ARRAY_START, CR_STRING_ARRAY_END);
            } 
            // fall through
          case 470: break;
          case 209: 
            { return handle(CR_ELSE);
            } 
            // fall through
          case 471: break;
          case 210: 
            { return handle(CR_ENUM);
            } 
            // fall through
          case 472: break;
          case 211: 
            { return handle(CR_WITH);
            } 
            // fall through
          case 473: break;
          case 212: 
            { return handle(CR_WHEN);
            } 
            // fall through
          case 474: break;
          case 213: 
            { return handle(CR_SELF);
            } 
            // fall through
          case 475: break;
          case 214: 
            { return handle(CR_TRUE);
            } 
            // fall through
          case 476: break;
          case 215: 
            { return handle(CR_TYPE);
            } 
            // fall through
          case 477: break;
          case 216: 
            { return handle(CR_THEN);
            } 
            // fall through
          case 478: break;
          case 217: 
            { return handle(CR_CASE);
            } 
            // fall through
          case 479: break;
          case 218: 
            { return handle(CR_IS_NIL);
            } 
            // fall through
          case 480: break;
          case 219: 
            { return handle(CR_NEXT);
            } 
            // fall through
          case 481: break;
          case 220: 
            { String id = StringUtil.unquoteString(yytext().subSequence(3, yylength()).toString());
    if (macroState.heredocs == null) macroState.heredocs = new ArrayDeque<>();
    macroState.heredocs.addLast(new DelimiterState(DelimiterKind.HEREDOC, id, id));
    yybegin(MACRO_MAIN);
            } 
            // fall through
          case 482: break;
          case 221: 
            { return handle(CR_BEGIN);
            } 
            // fall through
          case 483: break;
          case 222: 
            { return handle(CR_BREAK);
            } 
            // fall through
          case 484: break;
          case 223: 
            { return handle(CR_IS_A);
            } 
            // fall through
          case 485: break;
          case 224: 
            { return handle(CR_UNION);
            } 
            // fall through
          case 486: break;
          case 225: 
            { return handle(CR_UNTIL);
            } 
            // fall through
          case 487: break;
          case 226: 
            { return handle(CR_FALSE);
            } 
            // fall through
          case 488: break;
          case 227: 
            { return handle(CR_ELSIF);
            } 
            // fall through
          case 489: break;
          case 228: 
            { return handle(CR_ALIAS);
            } 
            // fall through
          case 490: break;
          case 229: 
            { return handle(CR_WHILE);
            } 
            // fall through
          case 491: break;
          case 230: 
            { return handle(CR_SUPER);
            } 
            // fall through
          case 492: break;
          case 231: 
            { return handle(CR_SELF_NIL);
            } 
            // fall through
          case 493: break;
          case 232: 
            { return handle(CR_CLASS);
            } 
            // fall through
          case 494: break;
          case 233: 
            { return handle(CR_MACRO);
            } 
            // fall through
          case 495: break;
          case 234: 
            { return handle(CR_YIELD);
            } 
            // fall through
          case 496: break;
          case 235: 
            { return handle(CR_UNLESS);
            } 
            // fall through
          case 497: break;
          case 236: 
            { return handle(CR_FORALL);
            } 
            // fall through
          case 498: break;
          case 237: 
            { return handle(CR_EXTEND);
            } 
            // fall through
          case 499: break;
          case 238: 
            { return handle(CR_ENSURE);
            } 
            // fall through
          case 500: break;
          case 239: 
            { return handle(CR_RESCUE);
            } 
            // fall through
          case 501: break;
          case 240: 
            { return handle(CR_RETURN);
            } 
            // fall through
          case 502: break;
          case 241: 
            { return handle(CR_SIZEOF);
            } 
            // fall through
          case 503: break;
          case 242: 
            { return handle(CR_SELECT);
            } 
            // fall through
          case 504: break;
          case 243: 
            { return handle(CR_STRUCT);
            } 
            // fall through
          case 505: break;
          case 244: 
            { return handle(CR_TYPEOF);
            } 
            // fall through
          case 506: break;
          case 245: 
            { return handle(CR_MODULE);
            } 
            // fall through
          case 507: break;
          case 246: 
            { return handle(CR_DIR_);
            } 
            // fall through
          case 508: break;
          case 247: 
            { return handle(CR_INCLUDE);
            } 
            // fall through
          case 509: break;
          case 248: 
            { return handle(CR_REQUIRE);
            } 
            // fall through
          case 510: break;
          case 249: 
            { return handle(CR_PRIVATE);
            } 
            // fall through
          case 511: break;
          case 250: 
            { return handle(CR_LINE_);
            } 
            // fall through
          case 512: break;
          case 251: 
            { return handle(CR_FILE_);
            } 
            // fall through
          case 513: break;
          case 252: 
            { return handle(CR_OFFSETOF);
            } 
            // fall through
          case 514: break;
          case 253: 
            { return handle(CR_VERBATIM);
            } 
            // fall through
          case 515: break;
          case 254: 
            { return handle(CR_ABSTRACT);
            } 
            // fall through
          case 516: break;
          case 255: 
            { return handle(CR_POINTEROF);
            } 
            // fall through
          case 517: break;
          case 256: 
            { return handle(CR_PROTECTED);
            } 
            // fall through
          case 518: break;
          case 257: 
            { return handle(CR_ANNOTATION);
            } 
            // fall through
          case 519: break;
          case 258: 
            { return handle(CR_END_LINE_);
            } 
            // fall through
          case 520: break;
          case 259: 
            { return handle(CR_RESPONDS_TO);
            } 
            // fall through
          case 521: break;
          case 260: 
            { return handle(CR_UNINITIALIZED);
            } 
            // fall through
          case 522: break;
          case 261: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { processMacroStartKeyword(false);
            } 
            // fall through
          case 523: break;
          case 262: 
            { return handle(CR_INSTANCE_SIZEOF);
            } 
            // fall through
          case 524: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
